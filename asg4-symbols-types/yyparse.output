Terminals unused in grammar

   TOK_FIELD
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   ROOT
   NUMBER
   IDENT
   TOK_TYPE_ID
   TOK_FUNCTION
   TOK_INDEX
   TOK_PARAM
   '.'
   '!'


Rules useless in parser due to conflicts

   51 dangling: %empty


State 19 conflicts: 2 shift/reduce
State 20 conflicts: 1 shift/reduce, 1 reduce/reduce
State 58 conflicts: 15 shift/reduce
State 67 conflicts: 1 shift/reduce
State 68 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 118 conflicts: 1 shift/reduce
State 119 conflicts: 1 shift/reduce
State 120 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 123 conflicts: 1 shift/reduce
State 124 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 127 conflicts: 1 shift/reduce
State 128 conflicts: 1 shift/reduce
State 129 conflicts: 1 shift/reduce
State 133 conflicts: 1 shift/reduce
State 135 conflicts: 1 shift/reduce
State 153 conflicts: 28 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}' ';'
   10          | TOK_STRUCT TOK_IDENT typeident '}' ';'
   11          | TOK_STRUCT TOK_IDENT typeident '}'

   12 typeident: typeident type TOK_IDENT ';'
   13          | '{' type TOK_IDENT ';'

   14 type: plaintype
   15     | TOK_ARRAY TOK_LT plaintype TOK_GT

   16 plaintype: TOK_VOID
   17          | TOK_INT
   18          | TOK_STRING
   19          | TOK_BOOL
   20          | TOK_REF
   21          | TOK_CHAR
   22          | TOK_IDENT
   23          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   24          | TOK_PTR TOK_LT TOK_IDENT TOK_GT

   25 function: type TOK_IDENT funcident ')' block
   26         | type '[' ']' TOK_IDENT funcident ')' block
   27         | type TOK_IDENT '(' ')' block

   28 funcident: funcident ',' type TOK_IDENT
   29          | funcident ',' type '[' ']' TOK_IDENT
   30          | '(' type TOK_IDENT

   31 block: optstmt '}'
   32      | optstmt '}' ';'
   33      | '{' '}'
   34      | ';'

   35 optstmt: optstmt statement
   36        | '{' statement

   37 statement: vardecl
   38          | block
   39          | while
   40          | ifelse
   41          | return
   42          | expr ';'

   43 vardecl: type TOK_IDENT ';'
   44        | type TOK_IDENT '=' expr ';'
   45        | type '[' ']' TOK_IDENT '=' expr ';'
   46        | TOK_IDENT '[' expr ']' '=' expr ';'

   47 while: TOK_WHILE '(' expr ')' statement

   48 ifelse: TOK_IF '(' expr ')' statement
   49       | TOK_IF '(' expr ')' statement dangling

   50 dangling: TOK_ELSE statement
   51         | %empty

   52 return: TOK_RETURN ';'
   53       | TOK_RETURN expr ';'

   54 expr: expr '=' expr
   55     | expr '+' expr
   56     | expr '-' expr
   57     | expr '*' expr
   58     | expr '/' expr
   59     | expr '^' expr
   60     | expr '%' expr
   61     | expr TOK_GT expr
   62     | expr TOK_GE expr
   63     | expr TOK_LT expr
   64     | expr TOK_LE expr
   65     | expr TOK_EQ expr
   66     | expr TOK_NE expr
   67     | '+' expr
   68     | '-' expr
   69     | allocator
   70     | call
   71     | '(' expr ')'
   72     | TOK_NOT expr
   73     | TOK_NEW type '[' expr ']'
   74     | variable
   75     | constant

   76 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   77          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   78          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   79 call: callexpr ')'
   80     | TOK_IDENT '(' ')'

   81 callexpr: TOK_IDENT '(' expr
   82         | callexpr ',' expr

   83 variable: TOK_IDENT
   84         | expr '[' expr ']'
   85         | expr TOK_ARROW TOK_IDENT

   86 constant: TOK_INTCON
   87         | TOK_CHARCON
   88         | TOK_STRINGCON
   89         | TOK_NOT
   90         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37) 60
'(' (40) 27 30 47 48 49 71 76 77 78 80 81
')' (41) 25 26 27 47 48 49 71 76 77 78 79 80
'*' (42) 57
'+' (43) 55 67
',' (44) 28 29 82
'-' (45) 56 68
'.' (46)
'/' (47) 58
';' (59) 6 9 10 12 13 32 34 42 43 44 45 46 52 53
'=' (61) 44 45 46 54
'[' (91) 26 29 45 46 73 84
']' (93) 26 29 45 46 73 84
'^' (94) 59
'{' (123) 8 9 13 33 36
'}' (125) 5 8 9 10 11 31 32 33
error (256) 5 6
TOK_VOID (258) 16
TOK_INT (259) 17
TOK_STRING (260) 18 76
TOK_BOOL (261) 19
TOK_REF (262) 20
TOK_CHAR (263) 21
TOK_IF (264) 48 49
TOK_ELSE (265) 50
TOK_WHILE (266) 47
TOK_RETURN (267) 52 53
TOK_STRUCT (268) 8 9 10 11 23 77
TOK_FIELD (269)
TOK_NULLPTR (270) 90
TOK_ARRAY (271) 15 78
TOK_ARROW (272) 85
TOK_ALLOC (273) 76 77 78
TOK_PTR (274) 23 24
TOK_EQ (275) 65
TOK_NE (276) 66
TOK_LT (277) 15 23 24 63 76 77 78
TOK_LE (278) 64
TOK_GT (279) 15 23 24 61 76 77 78
TOK_GE (280) 62
TOK_NOT (281) 72 89
TOK_IDENT (282) 8 9 10 11 12 13 22 23 24 25 26 27 28 29 30 43 44 45
    46 77 80 81 83 85
TOK_INTCON (283) 86
TOK_CHARCON (284) 87
TOK_STRINGCON (285) 88
TOK_ROOT (286)
TOK_BLOCK (287)
TOK_CALL (288)
TOK_NEW (289) 73
ROOT (290)
NUMBER (291)
IDENT (292)
TOK_TYPE_ID (293)
TOK_FUNCTION (294)
TOK_INDEX (295)
TOK_PARAM (296)
POS (297)
NEG (298)


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
start (62)
    on left: 1, on right: 0
program (63)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (64)
    on left: 8 9 10 11, on right: 2
typeident (65)
    on left: 12 13, on right: 10 11 12
type (66)
    on left: 14 15, on right: 12 13 25 26 27 28 29 30 43 44 45 73
plaintype (67)
    on left: 16 17 18 19 20 21 22 23 24, on right: 14 15 78
function (68)
    on left: 25 26 27, on right: 3
funcident (69)
    on left: 28 29 30, on right: 25 26 28 29
block (70)
    on left: 31 32 33 34, on right: 25 26 27 38
optstmt (71)
    on left: 35 36, on right: 31 32 35
statement (72)
    on left: 37 38 39 40 41 42, on right: 4 35 36 47 48 49 50
vardecl (73)
    on left: 43 44 45 46, on right: 37
while (74)
    on left: 47, on right: 39
ifelse (75)
    on left: 48 49, on right: 40
dangling (76)
    on left: 50 51, on right: 49
return (77)
    on left: 52 53, on right: 41
expr (78)
    on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
    72 73 74 75, on right: 42 44 45 46 47 48 49 53 54 55 56 57 58 59
    60 61 62 63 64 65 66 67 68 71 72 73 76 78 81 82 84 85
allocator (79)
    on left: 76 77 78, on right: 69
call (80)
    on left: 79 80, on right: 70
callexpr (81)
    on left: 81 82, on right: 79 82
variable (82)
    on left: 83 84 85, on right: 74
constant (83)
    on left: 86 87 88 89 90, on right: 75


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_STRUCT     shift, and go to state 14
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    type       go to state 31
    plaintype  go to state 32
    function   go to state 33
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


State 5

   16 plaintype: TOK_VOID .

    $default  reduce using rule 16 (plaintype)


State 6

   17 plaintype: TOK_INT .

    $default  reduce using rule 17 (plaintype)


State 7

   18 plaintype: TOK_STRING .

    $default  reduce using rule 18 (plaintype)


State 8

   19 plaintype: TOK_BOOL .

    $default  reduce using rule 19 (plaintype)


State 9

   20 plaintype: TOK_REF .

    $default  reduce using rule 20 (plaintype)


State 10

   21 plaintype: TOK_CHAR .

    $default  reduce using rule 21 (plaintype)


State 11

   48 ifelse: TOK_IF . '(' expr ')' statement
   49       | TOK_IF . '(' expr ')' statement dangling

    '('  shift, and go to state 49


State 12

   47 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


State 13

   52 return: TOK_RETURN . ';'
   53       | TOK_RETURN . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    ';'            shift, and go to state 52
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 53
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 14

    8 structdef: TOK_STRUCT . TOK_IDENT '{' '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}' ';'
   10          | TOK_STRUCT . TOK_IDENT typeident '}' ';'
   11          | TOK_STRUCT . TOK_IDENT typeident '}'

    TOK_IDENT  shift, and go to state 54


State 15

   90 constant: TOK_NULLPTR .

    $default  reduce using rule 90 (constant)


State 16

   15 type: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 55


State 17

   76 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   77          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   78          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 56


State 18

   23 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   24          | TOK_PTR . TOK_LT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 57


State 19

   72 expr: TOK_NOT . expr
   89 constant: TOK_NOT .

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    '+'       [reduce using rule 89 (constant)]
    '-'       [reduce using rule 89 (constant)]
    $default  reduce using rule 89 (constant)

    expr       go to state 58
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 20

   22 plaintype: TOK_IDENT .
   46 vardecl: TOK_IDENT . '[' expr ']' '=' expr ';'
   80 call: TOK_IDENT . '(' ')'
   81 callexpr: TOK_IDENT . '(' expr
   83 variable: TOK_IDENT .

    '('  shift, and go to state 59
    '['  shift, and go to state 60

    TOK_IDENT  reduce using rule 22 (plaintype)
    '['        [reduce using rule 22 (plaintype)]
    '['        [reduce using rule 83 (variable)]
    $default   reduce using rule 83 (variable)


State 21

   86 constant: TOK_INTCON .

    $default  reduce using rule 86 (constant)


State 22

   87 constant: TOK_CHARCON .

    $default  reduce using rule 87 (constant)


State 23

   88 constant: TOK_STRINGCON .

    $default  reduce using rule 88 (constant)


State 24

   73 expr: TOK_NEW . type '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61

    type       go to state 62
    plaintype  go to state 32


State 25

   71 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 63
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 26

   33 block: '{' . '}'
   36 optstmt: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    '}'            shift, and go to state 64
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 65
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 66
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 27

   34 block: ';' .

    $default  reduce using rule 34 (block)


State 28

   67 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 67
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 29

   68 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 68
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 31

   25 function: type . TOK_IDENT funcident ')' block
   26         | type . '[' ']' TOK_IDENT funcident ')' block
   27         | type . TOK_IDENT '(' ')' block
   43 vardecl: type . TOK_IDENT ';'
   44        | type . TOK_IDENT '=' expr ';'
   45        | type . '[' ']' TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 69
    '['        shift, and go to state 70


State 32

   14 type: plaintype .

    $default  reduce using rule 14 (type)


State 33

    3 program: program function .

    $default  reduce using rule 3 (program)


State 34

   38 statement: block .

    $default  reduce using rule 38 (statement)


State 35

   31 block: optstmt . '}'
   32      | optstmt . '}' ';'
   35 optstmt: optstmt . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    '}'            shift, and go to state 71
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 65
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 72
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 37

   37 statement: vardecl .

    $default  reduce using rule 37 (statement)


State 38

   39 statement: while .

    $default  reduce using rule 39 (statement)


State 39

   40 statement: ifelse .

    $default  reduce using rule 40 (statement)


State 40

   41 statement: return .

    $default  reduce using rule 41 (statement)


State 41

   42 statement: expr . ';'
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ';'        shift, and go to state 81
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 42

   69 expr: allocator .

    $default  reduce using rule 69 (expr)


State 43

   70 expr: call .

    $default  reduce using rule 70 (expr)


State 44

   79 call: callexpr . ')'
   82 callexpr: callexpr . ',' expr

    ')'  shift, and go to state 89
    ','  shift, and go to state 90


State 45

   74 expr: variable .

    $default  reduce using rule 74 (expr)


State 46

   75 expr: constant .

    $default  reduce using rule 75 (expr)


State 47

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 48

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 49

   48 ifelse: TOK_IF '(' . expr ')' statement
   49       | TOK_IF '(' . expr ')' statement dangling

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 91
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 50

   47 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 92
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 51

   80 call: TOK_IDENT . '(' ')'
   81 callexpr: TOK_IDENT . '(' expr
   83 variable: TOK_IDENT .

    '('  shift, and go to state 59

    $default  reduce using rule 83 (variable)


State 52

   52 return: TOK_RETURN ';' .

    $default  reduce using rule 52 (return)


State 53

   53 return: TOK_RETURN expr . ';'
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ';'        shift, and go to state 93
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 54

    8 structdef: TOK_STRUCT TOK_IDENT . '{' '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}' ';'
   10          | TOK_STRUCT TOK_IDENT . typeident '}' ';'
   11          | TOK_STRUCT TOK_IDENT . typeident '}'

    '{'  shift, and go to state 94

    typeident  go to state 95


State 55

   15 type: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61

    plaintype  go to state 96


State 56

   76 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   77          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   78          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 97
    TOK_STRUCT  shift, and go to state 98
    TOK_ARRAY   shift, and go to state 99


State 57

   23 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT
   24          | TOK_PTR TOK_LT . TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 100
    TOK_IDENT   shift, and go to state 101


State 58

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   72     | TOK_NOT expr .
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 72 (expr)]
    TOK_EQ     [reduce using rule 72 (expr)]
    TOK_NE     [reduce using rule 72 (expr)]
    TOK_LT     [reduce using rule 72 (expr)]
    TOK_LE     [reduce using rule 72 (expr)]
    TOK_GT     [reduce using rule 72 (expr)]
    TOK_GE     [reduce using rule 72 (expr)]
    '['        [reduce using rule 72 (expr)]
    '='        [reduce using rule 72 (expr)]
    '+'        [reduce using rule 72 (expr)]
    '-'        [reduce using rule 72 (expr)]
    '*'        [reduce using rule 72 (expr)]
    '/'        [reduce using rule 72 (expr)]
    '%'        [reduce using rule 72 (expr)]
    '^'        [reduce using rule 72 (expr)]
    $default   reduce using rule 72 (expr)


State 59

   80 call: TOK_IDENT '(' . ')'
   81 callexpr: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    ')'            shift, and go to state 102
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 103
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 60

   46 vardecl: TOK_IDENT '[' . expr ']' '=' expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 104
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 61

   22 plaintype: TOK_IDENT .

    $default  reduce using rule 22 (plaintype)


State 62

   73 expr: TOK_NEW type . '[' expr ']'

    '['  shift, and go to state 105


State 63

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   71     | '(' expr . ')'
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    ')'        shift, and go to state 106
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 64

   33 block: '{' '}' .

    $default  reduce using rule 33 (block)


State 65

   43 vardecl: type . TOK_IDENT ';'
   44        | type . TOK_IDENT '=' expr ';'
   45        | type . '[' ']' TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 107
    '['        shift, and go to state 108


State 66

   36 optstmt: '{' statement .

    $default  reduce using rule 36 (optstmt)


State 67

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   67     | '+' expr .
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80

    TOK_ARROW  [reduce using rule 67 (expr)]
    $default   reduce using rule 67 (expr)


State 68

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   68     | '-' expr .
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80

    TOK_ARROW  [reduce using rule 68 (expr)]
    $default   reduce using rule 68 (expr)


State 69

   25 function: type TOK_IDENT . funcident ')' block
   27         | type TOK_IDENT . '(' ')' block
   43 vardecl: type TOK_IDENT . ';'
   44        | type TOK_IDENT . '=' expr ';'

    '('  shift, and go to state 109
    ';'  shift, and go to state 110
    '='  shift, and go to state 111

    funcident  go to state 112


State 70

   26 function: type '[' . ']' TOK_IDENT funcident ')' block
   45 vardecl: type '[' . ']' TOK_IDENT '=' expr ';'

    ']'  shift, and go to state 113


State 71

   31 block: optstmt '}' .
   32      | optstmt '}' . ';'

    ';'  shift, and go to state 114

    ';'       [reduce using rule 31 (block)]
    $default  reduce using rule 31 (block)


State 72

   35 optstmt: optstmt statement .

    $default  reduce using rule 35 (optstmt)


State 73

   85 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 115


State 74

   65 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 116
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 75

   66 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 117
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 76

   63 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 118
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 77

   64 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 119
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 78

   61 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 120
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 79

   62 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 121
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 80

   84 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 122
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 81

   42 statement: expr ';' .

    $default  reduce using rule 42 (statement)


State 82

   54 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 123
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 83

   55 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 124
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 84

   56 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 125
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 85

   57 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 126
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 86

   58 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 127
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 87

   60 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 128
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 88

   59 expr: expr '^' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 129
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 89

   79 call: callexpr ')' .

    $default  reduce using rule 79 (call)


State 90

   82 callexpr: callexpr ',' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 130
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 91

   48 ifelse: TOK_IF '(' expr . ')' statement
   49       | TOK_IF '(' expr . ')' statement dangling
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    ')'        shift, and go to state 131
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 92

   47 while: TOK_WHILE '(' expr . ')' statement
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    ')'        shift, and go to state 132
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 93

   53 return: TOK_RETURN expr ';' .

    $default  reduce using rule 53 (return)


State 94

    8 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
    9          | TOK_STRUCT TOK_IDENT '{' . '}' ';'
   13 typeident: '{' . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61
    '}'         shift, and go to state 133

    type       go to state 134
    plaintype  go to state 32


State 95

   10 structdef: TOK_STRUCT TOK_IDENT typeident . '}' ';'
   11          | TOK_STRUCT TOK_IDENT typeident . '}'
   12 typeident: typeident . type TOK_IDENT ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61
    '}'         shift, and go to state 135

    type       go to state 136
    plaintype  go to state 32


State 96

   15 type: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 137


State 97

   76 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 138


State 98

   77 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 139


State 99

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 140


State 100

   23 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 141


State 101

   24 plaintype: TOK_PTR TOK_LT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 142


State 102

   80 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 80 (call)


State 103

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   81 callexpr: TOK_IDENT '(' expr .
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88

    $default  reduce using rule 81 (callexpr)


State 104

   46 vardecl: TOK_IDENT '[' expr . ']' '=' expr ';'
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ']'        shift, and go to state 143
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 105

   73 expr: TOK_NEW type '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 144
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 106

   71 expr: '(' expr ')' .

    $default  reduce using rule 71 (expr)


State 107

   43 vardecl: type TOK_IDENT . ';'
   44        | type TOK_IDENT . '=' expr ';'

    ';'  shift, and go to state 110
    '='  shift, and go to state 111


State 108

   45 vardecl: type '[' . ']' TOK_IDENT '=' expr ';'

    ']'  shift, and go to state 145


State 109

   27 function: type TOK_IDENT '(' . ')' block
   30 funcident: '(' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61
    ')'         shift, and go to state 146

    type       go to state 147
    plaintype  go to state 32


State 110

   43 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 43 (vardecl)


State 111

   44 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 148
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 112

   25 function: type TOK_IDENT funcident . ')' block
   28 funcident: funcident . ',' type TOK_IDENT
   29          | funcident . ',' type '[' ']' TOK_IDENT

    ')'  shift, and go to state 149
    ','  shift, and go to state 150


State 113

   26 function: type '[' ']' . TOK_IDENT funcident ')' block
   45 vardecl: type '[' ']' . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 151


State 114

   32 block: optstmt '}' ';' .

    $default  reduce using rule 32 (block)


State 115

   85 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 85 (variable)


State 116

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   65     | expr TOK_EQ expr .
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 65 (expr)]
    $default   reduce using rule 65 (expr)


State 117

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   66     | expr TOK_NE expr .
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 66 (expr)]
    $default   reduce using rule 66 (expr)


State 118

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   63     | expr TOK_LT expr .
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)


State 119

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   64     | expr TOK_LE expr .
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 64 (expr)]
    $default   reduce using rule 64 (expr)


State 120

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   61     | expr TOK_GT expr .
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 61 (expr)]
    $default   reduce using rule 61 (expr)


State 121

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   62     | expr TOK_GE expr .
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 62 (expr)]
    $default   reduce using rule 62 (expr)


State 122

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   84         | expr '[' expr . ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ']'        shift, and go to state 152
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 123

   54 expr: expr . '=' expr
   54     | expr '=' expr .
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 54 (expr)]
    $default   reduce using rule 54 (expr)


State 124

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   55     | expr '+' expr .
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 55 (expr)]
    $default   reduce using rule 55 (expr)


State 125

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   56     | expr '-' expr .
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 56 (expr)]
    $default   reduce using rule 56 (expr)


State 126

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   57     | expr '*' expr .
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 57 (expr)]
    $default   reduce using rule 57 (expr)


State 127

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   58     | expr '/' expr .
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 58 (expr)]
    $default   reduce using rule 58 (expr)


State 128

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   60     | expr '%' expr .
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 60 (expr)]
    $default   reduce using rule 60 (expr)


State 129

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   59     | expr '^' expr .
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    '['        shift, and go to state 80
    '^'        shift, and go to state 88

    TOK_ARROW  [reduce using rule 59 (expr)]
    $default   reduce using rule 59 (expr)


State 130

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   82 callexpr: callexpr ',' expr .
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88

    $default  reduce using rule 82 (callexpr)


State 131

   48 ifelse: TOK_IF '(' expr ')' . statement
   49       | TOK_IF '(' expr ')' . statement dangling

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 65
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 153
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 132

   47 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 65
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 154
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 133

    8 structdef: TOK_STRUCT TOK_IDENT '{' '}' .
    9          | TOK_STRUCT TOK_IDENT '{' '}' . ';'

    ';'  shift, and go to state 155

    ';'       [reduce using rule 8 (structdef)]
    $default  reduce using rule 8 (structdef)


State 134

   13 typeident: '{' type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 156


State 135

   10 structdef: TOK_STRUCT TOK_IDENT typeident '}' . ';'
   11          | TOK_STRUCT TOK_IDENT typeident '}' .

    ';'  shift, and go to state 157

    ';'       [reduce using rule 11 (structdef)]
    $default  reduce using rule 11 (structdef)


State 136

   12 typeident: typeident type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 158


State 137

   15 type: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 15 (type)


State 138

   76 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 159


State 139

   77 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 160


State 140

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61

    plaintype  go to state 161


State 141

   23 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 162


State 142

   24 plaintype: TOK_PTR TOK_LT TOK_IDENT TOK_GT .

    $default  reduce using rule 24 (plaintype)


State 143

   46 vardecl: TOK_IDENT '[' expr ']' . '=' expr ';'

    '='  shift, and go to state 163


State 144

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   73     | TOK_NEW type '[' expr . ']'
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ']'        shift, and go to state 164
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 145

   45 vardecl: type '[' ']' . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 165


State 146

   27 function: type TOK_IDENT '(' ')' . block

    '{'  shift, and go to state 26
    ';'  shift, and go to state 27

    block    go to state 166
    optstmt  go to state 35


State 147

   30 funcident: '(' type . TOK_IDENT

    TOK_IDENT  shift, and go to state 167


State 148

   44 vardecl: type TOK_IDENT '=' expr . ';'
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ';'        shift, and go to state 168
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 149

   25 function: type TOK_IDENT funcident ')' . block

    '{'  shift, and go to state 26
    ';'  shift, and go to state 27

    block    go to state 169
    optstmt  go to state 35


State 150

   28 funcident: funcident ',' . type TOK_IDENT
   29          | funcident ',' . type '[' ']' TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61

    type       go to state 170
    plaintype  go to state 32


State 151

   26 function: type '[' ']' TOK_IDENT . funcident ')' block
   45 vardecl: type '[' ']' TOK_IDENT . '=' expr ';'

    '('  shift, and go to state 171
    '='  shift, and go to state 172

    funcident  go to state 173


State 152

   84 variable: expr '[' expr ']' .

    $default  reduce using rule 84 (variable)


State 153

   48 ifelse: TOK_IF '(' expr ')' statement .
   49       | TOK_IF '(' expr ')' statement . dangling

    TOK_ELSE  shift, and go to state 174

    $end           reduce using rule 48 (ifelse)
    $end           [reduce using rule 51 (dangling)]
    error          reduce using rule 48 (ifelse)
    error          [reduce using rule 51 (dangling)]
    TOK_VOID       reduce using rule 48 (ifelse)
    TOK_VOID       [reduce using rule 51 (dangling)]
    TOK_INT        reduce using rule 48 (ifelse)
    TOK_INT        [reduce using rule 51 (dangling)]
    TOK_STRING     reduce using rule 48 (ifelse)
    TOK_STRING     [reduce using rule 51 (dangling)]
    TOK_BOOL       reduce using rule 48 (ifelse)
    TOK_BOOL       [reduce using rule 51 (dangling)]
    TOK_REF        reduce using rule 48 (ifelse)
    TOK_REF        [reduce using rule 51 (dangling)]
    TOK_CHAR       reduce using rule 48 (ifelse)
    TOK_CHAR       [reduce using rule 51 (dangling)]
    TOK_IF         reduce using rule 48 (ifelse)
    TOK_IF         [reduce using rule 51 (dangling)]
    TOK_WHILE      reduce using rule 48 (ifelse)
    TOK_WHILE      [reduce using rule 51 (dangling)]
    TOK_RETURN     reduce using rule 48 (ifelse)
    TOK_RETURN     [reduce using rule 51 (dangling)]
    TOK_STRUCT     reduce using rule 48 (ifelse)
    TOK_STRUCT     [reduce using rule 51 (dangling)]
    TOK_NULLPTR    reduce using rule 48 (ifelse)
    TOK_NULLPTR    [reduce using rule 51 (dangling)]
    TOK_ARRAY      reduce using rule 48 (ifelse)
    TOK_ARRAY      [reduce using rule 51 (dangling)]
    TOK_ALLOC      reduce using rule 48 (ifelse)
    TOK_ALLOC      [reduce using rule 51 (dangling)]
    TOK_PTR        reduce using rule 48 (ifelse)
    TOK_PTR        [reduce using rule 51 (dangling)]
    TOK_NOT        reduce using rule 48 (ifelse)
    TOK_NOT        [reduce using rule 51 (dangling)]
    TOK_IDENT      reduce using rule 48 (ifelse)
    TOK_IDENT      [reduce using rule 51 (dangling)]
    TOK_INTCON     reduce using rule 48 (ifelse)
    TOK_INTCON     [reduce using rule 51 (dangling)]
    TOK_CHARCON    reduce using rule 48 (ifelse)
    TOK_CHARCON    [reduce using rule 51 (dangling)]
    TOK_STRINGCON  reduce using rule 48 (ifelse)
    TOK_STRINGCON  [reduce using rule 51 (dangling)]
    TOK_NEW        reduce using rule 48 (ifelse)
    TOK_NEW        [reduce using rule 51 (dangling)]
    '('            reduce using rule 48 (ifelse)
    '('            [reduce using rule 51 (dangling)]
    '{'            reduce using rule 48 (ifelse)
    '{'            [reduce using rule 51 (dangling)]
    '}'            reduce using rule 48 (ifelse)
    '}'            [reduce using rule 51 (dangling)]
    ';'            reduce using rule 48 (ifelse)
    ';'            [reduce using rule 51 (dangling)]
    '+'            reduce using rule 48 (ifelse)
    '+'            [reduce using rule 51 (dangling)]
    '-'            reduce using rule 48 (ifelse)
    '-'            [reduce using rule 51 (dangling)]
    $default       reduce using rule 48 (ifelse)

    dangling  go to state 175


State 154

   47 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 47 (while)


State 155

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' ';' .

    $default  reduce using rule 9 (structdef)


State 156

   13 typeident: '{' type TOK_IDENT . ';'

    ';'  shift, and go to state 176


State 157

   10 structdef: TOK_STRUCT TOK_IDENT typeident '}' ';' .

    $default  reduce using rule 10 (structdef)


State 158

   12 typeident: typeident type TOK_IDENT . ';'

    ';'  shift, and go to state 177


State 159

   76 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 178
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 160

   77 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 179


State 161

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 180


State 162

   23 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 23 (plaintype)


State 163

   46 vardecl: TOK_IDENT '[' expr ']' '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 181
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 164

   73 expr: TOK_NEW type '[' expr ']' .

    $default  reduce using rule 73 (expr)


State 165

   45 vardecl: type '[' ']' TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 172


State 166

   27 function: type TOK_IDENT '(' ')' block .

    $default  reduce using rule 27 (function)


State 167

   30 funcident: '(' type TOK_IDENT .

    $default  reduce using rule 30 (funcident)


State 168

   44 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 44 (vardecl)


State 169

   25 function: type TOK_IDENT funcident ')' block .

    $default  reduce using rule 25 (function)


State 170

   28 funcident: funcident ',' type . TOK_IDENT
   29          | funcident ',' type . '[' ']' TOK_IDENT

    TOK_IDENT  shift, and go to state 182
    '['        shift, and go to state 183


State 171

   30 funcident: '(' . type TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    TOK_IDENT   shift, and go to state 61

    type       go to state 147
    plaintype  go to state 32


State 172

   45 vardecl: type '[' ']' TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 184
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 173

   26 function: type '[' ']' TOK_IDENT funcident . ')' block
   28 funcident: funcident . ',' type TOK_IDENT
   29          | funcident . ',' type '[' ']' TOK_IDENT

    ')'  shift, and go to state 185
    ','  shift, and go to state 150


State 174

   50 dangling: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 65
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 186
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 175

   49 ifelse: TOK_IF '(' expr ')' statement dangling .

    $default  reduce using rule 49 (ifelse)


State 176

   13 typeident: '{' type TOK_IDENT ';' .

    $default  reduce using rule 13 (typeident)


State 177

   12 typeident: typeident type TOK_IDENT ';' .

    $default  reduce using rule 12 (typeident)


State 178

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   76 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    ')'        shift, and go to state 187
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 179

   77 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 188


State 180

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 189


State 181

   46 vardecl: TOK_IDENT '[' expr ']' '=' expr . ';'
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ';'        shift, and go to state 190
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 182

   28 funcident: funcident ',' type TOK_IDENT .

    $default  reduce using rule 28 (funcident)


State 183

   29 funcident: funcident ',' type '[' . ']' TOK_IDENT

    ']'  shift, and go to state 191


State 184

   45 vardecl: type '[' ']' TOK_IDENT '=' expr . ';'
   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    '['        shift, and go to state 80
    ';'        shift, and go to state 192
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 185

   26 function: type '[' ']' TOK_IDENT funcident ')' . block

    '{'  shift, and go to state 26
    ';'  shift, and go to state 27

    block    go to state 193
    optstmt  go to state 35


State 186

   50 dangling: TOK_ELSE statement .

    $default  reduce using rule 50 (dangling)


State 187

   76 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 76 (allocator)


State 188

   77 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 77 (allocator)


State 189

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 194


State 190

   46 vardecl: TOK_IDENT '[' expr ']' '=' expr ';' .

    $default  reduce using rule 46 (vardecl)


State 191

   29 funcident: funcident ',' type '[' ']' . TOK_IDENT

    TOK_IDENT  shift, and go to state 195


State 192

   45 vardecl: type '[' ']' TOK_IDENT '=' expr ';' .

    $default  reduce using rule 45 (vardecl)


State 193

   26 function: type '[' ']' TOK_IDENT funcident ')' block .

    $default  reduce using rule 26 (function)


State 194

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 51
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 196
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 195

   29 funcident: funcident ',' type '[' ']' TOK_IDENT .

    $default  reduce using rule 29 (funcident)


State 196

   54 expr: expr . '=' expr
   55     | expr . '+' expr
   56     | expr . '-' expr
   57     | expr . '*' expr
   58     | expr . '/' expr
   59     | expr . '^' expr
   60     | expr . '%' expr
   61     | expr . TOK_GT expr
   62     | expr . TOK_GE expr
   63     | expr . TOK_LT expr
   64     | expr . TOK_LE expr
   65     | expr . TOK_EQ expr
   66     | expr . TOK_NE expr
   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   84 variable: expr . '[' expr ']'
   85         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 73
    TOK_EQ     shift, and go to state 74
    TOK_NE     shift, and go to state 75
    TOK_LT     shift, and go to state 76
    TOK_LE     shift, and go to state 77
    TOK_GT     shift, and go to state 78
    TOK_GE     shift, and go to state 79
    ')'        shift, and go to state 197
    '['        shift, and go to state 80
    '='        shift, and go to state 82
    '+'        shift, and go to state 83
    '-'        shift, and go to state 84
    '*'        shift, and go to state 85
    '/'        shift, and go to state 86
    '%'        shift, and go to state 87
    '^'        shift, and go to state 88


State 197

   78 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 78 (allocator)
