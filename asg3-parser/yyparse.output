Terminals unused in grammar

   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   ROOT
   NUMBER
   IDENT
   TOK_TYPE_ID
   TOK_FUNCTION
   TOK_INDEX
   TOK_PARAM
   '.'
   '!'


Rules useless in parser due to conflicts

   46 dangling: %empty


State 19 conflicts: 2 shift/reduce
State 57 conflicts: 15 shift/reduce
State 64 conflicts: 1 shift/reduce
State 65 conflicts: 1 shift/reduce
State 68 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 1 shift/reduce
State 111 conflicts: 1 shift/reduce
State 112 conflicts: 1 shift/reduce
State 113 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 118 conflicts: 1 shift/reduce
State 119 conflicts: 1 shift/reduce
State 120 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 122 conflicts: 1 shift/reduce
State 141 conflicts: 28 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' ';'

    9 typeident: %empty
   10          | type TOK_IDENT ';' typeident

   11 type: plaintype
   12     | TOK_ARRAY TOK_LT plaintype TOK_GT

   13 plaintype: TOK_VOID
   14          | TOK_INT
   15          | TOK_STRING
   16          | TOK_BOOL
   17          | TOK_REF
   18          | TOK_CHAR
   19          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

   20 function: type TOK_IDENT '(' funcident ')' block

   21 funcident: %empty
   22          | type TOK_IDENT funcident
   23          | type '[' ']' TOK_IDENT funcident
   24          | ',' type TOK_IDENT funcident
   25          | ',' type '[' ']' TOK_IDENT funcident

   26 block: optstmt '}'
   27      | optstmt '}' ';'
   28      | '{' '}'
   29      | ';'

   30 optstmt: optstmt statement
   31        | '{' statement

   32 statement: vardecl
   33          | block
   34          | while
   35          | ifelse
   36          | return
   37          | expr ';'

   38 vardecl: type TOK_IDENT ';'
   39        | type TOK_IDENT '[' expr ']' ';'
   40        | type TOK_IDENT '=' expr ';'
   41        | type '[' ']' TOK_IDENT '=' expr ';'

   42 while: TOK_WHILE '(' expr ')' statement

   43 ifelse: TOK_IF '(' expr ')' statement
   44       | TOK_IF '(' expr ')' statement dangling

   45 dangling: TOK_ELSE statement
   46         | %empty

   47 return: TOK_RETURN ';'
   48       | TOK_RETURN expr ';'

   49 expr: expr '=' expr
   50     | expr '+' expr
   51     | expr '-' expr
   52     | expr '*' expr
   53     | expr '/' expr
   54     | expr '^' expr
   55     | expr '%' expr
   56     | expr TOK_GT expr
   57     | expr TOK_GE expr
   58     | expr TOK_LT expr
   59     | expr TOK_LE expr
   60     | expr TOK_EQ expr
   61     | expr TOK_NE expr
   62     | '+' expr
   63     | '-' expr
   64     | allocator
   65     | call
   66     | '(' expr ')'
   67     | TOK_NOT expr
   68     | TOK_NEW type '[' expr ']'
   69     | variable
   70     | constant

   71 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   72          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   73          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   74 call: callexpr ')'
   75     | TOK_IDENT '(' ')'

   76 callexpr: TOK_IDENT '(' expr
   77         | callexpr ',' expr

   78 variable: TOK_IDENT
   79         | expr '[' expr ']'
   80         | expr TOK_ARROW TOK_IDENT

   81 constant: TOK_INTCON
   82         | TOK_CHARCON
   83         | TOK_STRINGCON
   84         | TOK_NOT
   85         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37) 55
'(' (40) 20 42 43 44 66 71 72 73 75 76
')' (41) 20 42 43 44 66 71 72 73 74 75
'*' (42) 52
'+' (43) 50 62
',' (44) 24 25 77
'-' (45) 51 63
'.' (46)
'/' (47) 53
';' (59) 6 8 10 27 29 37 38 39 40 41 47 48
'=' (61) 40 41 49
'[' (91) 23 25 39 41 68 79
']' (93) 23 25 39 41 68 79
'^' (94) 54
'{' (123) 8 28 31
'}' (125) 5 8 26 27 28
error (256) 5 6
TOK_VOID (258) 13
TOK_INT (259) 14
TOK_STRING (260) 15 71
TOK_BOOL (261) 16
TOK_REF (262) 17
TOK_CHAR (263) 18
TOK_IF (264) 43 44
TOK_ELSE (265) 45
TOK_WHILE (266) 42
TOK_RETURN (267) 47 48
TOK_STRUCT (268) 8 19 72
TOK_NULLPTR (269) 85
TOK_ARRAY (270) 12 73
TOK_ARROW (271) 80
TOK_ALLOC (272) 71 72 73
TOK_PTR (273) 19
TOK_EQ (274) 60
TOK_NE (275) 61
TOK_LT (276) 12 19 58 71 72 73
TOK_LE (277) 59
TOK_GT (278) 12 19 56 71 72 73
TOK_GE (279) 57
TOK_NOT (280) 67 84
TOK_IDENT (281) 8 10 19 20 22 23 24 25 38 39 40 41 72 75 76 78 80
TOK_INTCON (282) 81
TOK_CHARCON (283) 82
TOK_STRINGCON (284) 83
TOK_ROOT (285)
TOK_BLOCK (286)
TOK_CALL (287)
TOK_NEW (288) 68
ROOT (289)
NUMBER (290)
IDENT (291)
TOK_TYPE_ID (292)
TOK_FUNCTION (293)
TOK_INDEX (294)
TOK_PARAM (295)
POS (296)
NEG (297)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
start (61)
    on left: 1, on right: 0
program (62)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (63)
    on left: 8, on right: 2
typeident (64)
    on left: 9 10, on right: 8 10
type (65)
    on left: 11 12, on right: 10 20 22 23 24 25 38 39 40 41 68
plaintype (66)
    on left: 13 14 15 16 17 18 19, on right: 11 12 73
function (67)
    on left: 20, on right: 3
funcident (68)
    on left: 21 22 23 24 25, on right: 20 22 23 24 25
block (69)
    on left: 26 27 28 29, on right: 20 33
optstmt (70)
    on left: 30 31, on right: 26 27 30
statement (71)
    on left: 32 33 34 35 36 37, on right: 4 30 31 42 43 44 45
vardecl (72)
    on left: 38 39 40 41, on right: 32
while (73)
    on left: 42, on right: 34
ifelse (74)
    on left: 43 44, on right: 35
dangling (75)
    on left: 45 46, on right: 44
return (76)
    on left: 47 48, on right: 36
expr (77)
    on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66
    67 68 69 70, on right: 37 39 40 41 42 43 44 48 49 50 51 52 53 54
    55 56 57 58 59 60 61 62 63 66 67 68 71 73 76 77 79 80
allocator (78)
    on left: 71 72 73, on right: 64
call (79)
    on left: 74 75, on right: 65
callexpr (80)
    on left: 76 77, on right: 74 77
variable (81)
    on left: 78 79 80, on right: 69
constant (82)
    on left: 81 82 83 84 85, on right: 70


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_STRUCT     shift, and go to state 14
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    type       go to state 31
    plaintype  go to state 32
    function   go to state 33
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


State 5

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 6

   14 plaintype: TOK_INT .

    $default  reduce using rule 14 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

   16 plaintype: TOK_BOOL .

    $default  reduce using rule 16 (plaintype)


State 9

   17 plaintype: TOK_REF .

    $default  reduce using rule 17 (plaintype)


State 10

   18 plaintype: TOK_CHAR .

    $default  reduce using rule 18 (plaintype)


State 11

   43 ifelse: TOK_IF . '(' expr ')' statement
   44       | TOK_IF . '(' expr ')' statement dangling

    '('  shift, and go to state 49


State 12

   42 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


State 13

   47 return: TOK_RETURN . ';'
   48       | TOK_RETURN . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    ';'            shift, and go to state 51
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 52
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 14

    8 structdef: TOK_STRUCT . TOK_IDENT '{' typeident '}' ';'

    TOK_IDENT  shift, and go to state 53


State 15

   85 constant: TOK_NULLPTR .

    $default  reduce using rule 85 (constant)


State 16

   12 type: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 54


State 17

   71 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   72          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   73          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 55


State 18

   19 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 56


State 19

   67 expr: TOK_NOT . expr
   84 constant: TOK_NOT .

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    '+'       [reduce using rule 84 (constant)]
    '-'       [reduce using rule 84 (constant)]
    $default  reduce using rule 84 (constant)

    expr       go to state 57
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 20

   75 call: TOK_IDENT . '(' ')'
   76 callexpr: TOK_IDENT . '(' expr
   78 variable: TOK_IDENT .

    '('  shift, and go to state 58

    $default  reduce using rule 78 (variable)


State 21

   81 constant: TOK_INTCON .

    $default  reduce using rule 81 (constant)


State 22

   82 constant: TOK_CHARCON .

    $default  reduce using rule 82 (constant)


State 23

   83 constant: TOK_STRINGCON .

    $default  reduce using rule 83 (constant)


State 24

   68 expr: TOK_NEW . type '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18

    type       go to state 59
    plaintype  go to state 32


State 25

   66 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 60
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 26

   28 block: '{' . '}'
   31 optstmt: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    '}'            shift, and go to state 61
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 63
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 27

   29 block: ';' .

    $default  reduce using rule 29 (block)


State 28

   62 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 64
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 29

   63 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 65
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 31

   20 function: type . TOK_IDENT '(' funcident ')' block
   38 vardecl: type . TOK_IDENT ';'
   39        | type . TOK_IDENT '[' expr ']' ';'
   40        | type . TOK_IDENT '=' expr ';'
   41        | type . '[' ']' TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 66
    '['        shift, and go to state 67


State 32

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 33

    3 program: program function .

    $default  reduce using rule 3 (program)


State 34

   33 statement: block .

    $default  reduce using rule 33 (statement)


State 35

   26 block: optstmt . '}'
   27      | optstmt . '}' ';'
   30 optstmt: optstmt . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    '}'            shift, and go to state 68
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 69
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 37

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


State 38

   34 statement: while .

    $default  reduce using rule 34 (statement)


State 39

   35 statement: ifelse .

    $default  reduce using rule 35 (statement)


State 40

   36 statement: return .

    $default  reduce using rule 36 (statement)


State 41

   37 statement: expr . ';'
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ';'        shift, and go to state 78
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 42

   64 expr: allocator .

    $default  reduce using rule 64 (expr)


State 43

   65 expr: call .

    $default  reduce using rule 65 (expr)


State 44

   74 call: callexpr . ')'
   77 callexpr: callexpr . ',' expr

    ')'  shift, and go to state 86
    ','  shift, and go to state 87


State 45

   69 expr: variable .

    $default  reduce using rule 69 (expr)


State 46

   70 expr: constant .

    $default  reduce using rule 70 (expr)


State 47

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 48

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 49

   43 ifelse: TOK_IF '(' . expr ')' statement
   44       | TOK_IF '(' . expr ')' statement dangling

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 88
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 50

   42 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 89
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 51

   47 return: TOK_RETURN ';' .

    $default  reduce using rule 47 (return)


State 52

   48 return: TOK_RETURN expr . ';'
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ';'        shift, and go to state 90
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 53

    8 structdef: TOK_STRUCT TOK_IDENT . '{' typeident '}' ';'

    '{'  shift, and go to state 91


State 54

   12 type: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_PTR     shift, and go to state 18

    plaintype  go to state 92


State 55

   71 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   72          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   73          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 93
    TOK_STRUCT  shift, and go to state 94
    TOK_ARRAY   shift, and go to state 95


State 56

   19 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 96


State 57

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   67     | TOK_NOT expr .
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 67 (expr)]
    TOK_EQ     [reduce using rule 67 (expr)]
    TOK_NE     [reduce using rule 67 (expr)]
    TOK_LT     [reduce using rule 67 (expr)]
    TOK_LE     [reduce using rule 67 (expr)]
    TOK_GT     [reduce using rule 67 (expr)]
    TOK_GE     [reduce using rule 67 (expr)]
    '['        [reduce using rule 67 (expr)]
    '='        [reduce using rule 67 (expr)]
    '+'        [reduce using rule 67 (expr)]
    '-'        [reduce using rule 67 (expr)]
    '*'        [reduce using rule 67 (expr)]
    '/'        [reduce using rule 67 (expr)]
    '%'        [reduce using rule 67 (expr)]
    '^'        [reduce using rule 67 (expr)]
    $default   reduce using rule 67 (expr)


State 58

   75 call: TOK_IDENT '(' . ')'
   76 callexpr: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    ')'            shift, and go to state 97
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 98
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 59

   68 expr: TOK_NEW type . '[' expr ']'

    '['  shift, and go to state 99


State 60

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   66     | '(' expr . ')'
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    ')'        shift, and go to state 100
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 61

   28 block: '{' '}' .

    $default  reduce using rule 28 (block)


State 62

   38 vardecl: type . TOK_IDENT ';'
   39        | type . TOK_IDENT '[' expr ']' ';'
   40        | type . TOK_IDENT '=' expr ';'
   41        | type . '[' ']' TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 101
    '['        shift, and go to state 67


State 63

   31 optstmt: '{' statement .

    $default  reduce using rule 31 (optstmt)


State 64

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   62     | '+' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77

    TOK_ARROW  [reduce using rule 62 (expr)]
    $default   reduce using rule 62 (expr)


State 65

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   63     | '-' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77

    TOK_ARROW  [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)


State 66

   20 function: type TOK_IDENT . '(' funcident ')' block
   38 vardecl: type TOK_IDENT . ';'
   39        | type TOK_IDENT . '[' expr ']' ';'
   40        | type TOK_IDENT . '=' expr ';'

    '('  shift, and go to state 102
    '['  shift, and go to state 103
    ';'  shift, and go to state 104
    '='  shift, and go to state 105


State 67

   41 vardecl: type '[' . ']' TOK_IDENT '=' expr ';'

    ']'  shift, and go to state 106


State 68

   26 block: optstmt '}' .
   27      | optstmt '}' . ';'

    ';'  shift, and go to state 107

    ';'       [reduce using rule 26 (block)]
    $default  reduce using rule 26 (block)


State 69

   30 optstmt: optstmt statement .

    $default  reduce using rule 30 (optstmt)


State 70

   80 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 108


State 71

   60 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 109
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 72

   61 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 110
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 73

   58 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 111
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 74

   59 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 112
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 75

   56 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 113
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 76

   57 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 114
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 77

   79 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 115
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 78

   37 statement: expr ';' .

    $default  reduce using rule 37 (statement)


State 79

   49 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 116
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 80

   50 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 117
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 81

   51 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 118
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 82

   52 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 119
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 83

   53 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 120
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 84

   55 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 121
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 85

   54 expr: expr '^' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 122
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 86

   74 call: callexpr ')' .

    $default  reduce using rule 74 (call)


State 87

   77 callexpr: callexpr ',' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 123
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 88

   43 ifelse: TOK_IF '(' expr . ')' statement
   44       | TOK_IF '(' expr . ')' statement dangling
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    ')'        shift, and go to state 124
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 89

   42 while: TOK_WHILE '(' expr . ')' statement
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    ')'        shift, and go to state 125
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 90

   48 return: TOK_RETURN expr ';' .

    $default  reduce using rule 48 (return)


State 91

    8 structdef: TOK_STRUCT TOK_IDENT '{' . typeident '}' ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18

    $default  reduce using rule 9 (typeident)

    typeident  go to state 126
    type       go to state 127
    plaintype  go to state 32


State 92

   12 type: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 128


State 93

   71 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 129


State 94

   72 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 130


State 95

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 131


State 96

   19 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 132


State 97

   75 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 75 (call)


State 98

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   76 callexpr: TOK_IDENT '(' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85

    $default  reduce using rule 76 (callexpr)


State 99

   68 expr: TOK_NEW type '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 133
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 100

   66 expr: '(' expr ')' .

    $default  reduce using rule 66 (expr)


State 101

   38 vardecl: type TOK_IDENT . ';'
   39        | type TOK_IDENT . '[' expr ']' ';'
   40        | type TOK_IDENT . '=' expr ';'

    '['  shift, and go to state 103
    ';'  shift, and go to state 104
    '='  shift, and go to state 105


State 102

   20 function: type TOK_IDENT '(' . funcident ')' block

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    ','         shift, and go to state 134

    $default  reduce using rule 21 (funcident)

    type       go to state 135
    plaintype  go to state 32
    funcident  go to state 136


State 103

   39 vardecl: type TOK_IDENT '[' . expr ']' ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 137
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 104

   38 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 38 (vardecl)


State 105

   40 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 138
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 106

   41 vardecl: type '[' ']' . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 139


State 107

   27 block: optstmt '}' ';' .

    $default  reduce using rule 27 (block)


State 108

   80 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 80 (variable)


State 109

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   60     | expr TOK_EQ expr .
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 60 (expr)]
    $default   reduce using rule 60 (expr)


State 110

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   61     | expr TOK_NE expr .
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 61 (expr)]
    $default   reduce using rule 61 (expr)


State 111

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   58     | expr TOK_LT expr .
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 58 (expr)]
    $default   reduce using rule 58 (expr)


State 112

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   59     | expr TOK_LE expr .
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 59 (expr)]
    $default   reduce using rule 59 (expr)


State 113

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   56     | expr TOK_GT expr .
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 56 (expr)]
    $default   reduce using rule 56 (expr)


State 114

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   57     | expr TOK_GE expr .
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 57 (expr)]
    $default   reduce using rule 57 (expr)


State 115

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   79         | expr '[' expr . ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ']'        shift, and go to state 140
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 116

   49 expr: expr . '=' expr
   49     | expr '=' expr .
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 49 (expr)]
    $default   reduce using rule 49 (expr)


State 117

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   50     | expr '+' expr .
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 50 (expr)]
    $default   reduce using rule 50 (expr)


State 118

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   51     | expr '-' expr .
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 51 (expr)]
    $default   reduce using rule 51 (expr)


State 119

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   52     | expr '*' expr .
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 52 (expr)]
    $default   reduce using rule 52 (expr)


State 120

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   53     | expr '/' expr .
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 53 (expr)]
    $default   reduce using rule 53 (expr)


State 121

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   55     | expr '%' expr .
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 55 (expr)]
    $default   reduce using rule 55 (expr)


State 122

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   54     | expr '^' expr .
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 77
    '^'        shift, and go to state 85

    TOK_ARROW  [reduce using rule 54 (expr)]
    $default   reduce using rule 54 (expr)


State 123

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   77 callexpr: callexpr ',' expr .
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85

    $default  reduce using rule 77 (callexpr)


State 124

   43 ifelse: TOK_IF '(' expr ')' . statement
   44       | TOK_IF '(' expr ')' . statement dangling

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 141
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 125

   42 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 142
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 126

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident . '}' ';'

    '}'  shift, and go to state 143


State 127

   10 typeident: type . TOK_IDENT ';' typeident

    TOK_IDENT  shift, and go to state 144


State 128

   12 type: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 12 (type)


State 129

   71 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 145


State 130

   72 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 146


State 131

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_PTR     shift, and go to state 18

    plaintype  go to state 147


State 132

   19 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 148


State 133

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   68     | TOK_NEW type '[' expr . ']'
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ']'        shift, and go to state 149
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 134

   24 funcident: ',' . type TOK_IDENT funcident
   25          | ',' . type '[' ']' TOK_IDENT funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18

    type       go to state 150
    plaintype  go to state 32


State 135

   22 funcident: type . TOK_IDENT funcident
   23          | type . '[' ']' TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 151
    '['        shift, and go to state 152


State 136

   20 function: type TOK_IDENT '(' funcident . ')' block

    ')'  shift, and go to state 153


State 137

   39 vardecl: type TOK_IDENT '[' expr . ']' ';'
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ']'        shift, and go to state 154
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 138

   40 vardecl: type TOK_IDENT '=' expr . ';'
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ';'        shift, and go to state 155
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 139

   41 vardecl: type '[' ']' TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 156


State 140

   79 variable: expr '[' expr ']' .

    $default  reduce using rule 79 (variable)


State 141

   43 ifelse: TOK_IF '(' expr ')' statement .
   44       | TOK_IF '(' expr ')' statement . dangling

    TOK_ELSE  shift, and go to state 157

    $end           reduce using rule 43 (ifelse)
    $end           [reduce using rule 46 (dangling)]
    error          reduce using rule 43 (ifelse)
    error          [reduce using rule 46 (dangling)]
    TOK_VOID       reduce using rule 43 (ifelse)
    TOK_VOID       [reduce using rule 46 (dangling)]
    TOK_INT        reduce using rule 43 (ifelse)
    TOK_INT        [reduce using rule 46 (dangling)]
    TOK_STRING     reduce using rule 43 (ifelse)
    TOK_STRING     [reduce using rule 46 (dangling)]
    TOK_BOOL       reduce using rule 43 (ifelse)
    TOK_BOOL       [reduce using rule 46 (dangling)]
    TOK_REF        reduce using rule 43 (ifelse)
    TOK_REF        [reduce using rule 46 (dangling)]
    TOK_CHAR       reduce using rule 43 (ifelse)
    TOK_CHAR       [reduce using rule 46 (dangling)]
    TOK_IF         reduce using rule 43 (ifelse)
    TOK_IF         [reduce using rule 46 (dangling)]
    TOK_WHILE      reduce using rule 43 (ifelse)
    TOK_WHILE      [reduce using rule 46 (dangling)]
    TOK_RETURN     reduce using rule 43 (ifelse)
    TOK_RETURN     [reduce using rule 46 (dangling)]
    TOK_STRUCT     reduce using rule 43 (ifelse)
    TOK_STRUCT     [reduce using rule 46 (dangling)]
    TOK_NULLPTR    reduce using rule 43 (ifelse)
    TOK_NULLPTR    [reduce using rule 46 (dangling)]
    TOK_ARRAY      reduce using rule 43 (ifelse)
    TOK_ARRAY      [reduce using rule 46 (dangling)]
    TOK_ALLOC      reduce using rule 43 (ifelse)
    TOK_ALLOC      [reduce using rule 46 (dangling)]
    TOK_PTR        reduce using rule 43 (ifelse)
    TOK_PTR        [reduce using rule 46 (dangling)]
    TOK_NOT        reduce using rule 43 (ifelse)
    TOK_NOT        [reduce using rule 46 (dangling)]
    TOK_IDENT      reduce using rule 43 (ifelse)
    TOK_IDENT      [reduce using rule 46 (dangling)]
    TOK_INTCON     reduce using rule 43 (ifelse)
    TOK_INTCON     [reduce using rule 46 (dangling)]
    TOK_CHARCON    reduce using rule 43 (ifelse)
    TOK_CHARCON    [reduce using rule 46 (dangling)]
    TOK_STRINGCON  reduce using rule 43 (ifelse)
    TOK_STRINGCON  [reduce using rule 46 (dangling)]
    TOK_NEW        reduce using rule 43 (ifelse)
    TOK_NEW        [reduce using rule 46 (dangling)]
    '('            reduce using rule 43 (ifelse)
    '('            [reduce using rule 46 (dangling)]
    '{'            reduce using rule 43 (ifelse)
    '{'            [reduce using rule 46 (dangling)]
    '}'            reduce using rule 43 (ifelse)
    '}'            [reduce using rule 46 (dangling)]
    ';'            reduce using rule 43 (ifelse)
    ';'            [reduce using rule 46 (dangling)]
    '+'            reduce using rule 43 (ifelse)
    '+'            [reduce using rule 46 (dangling)]
    '-'            reduce using rule 43 (ifelse)
    '-'            [reduce using rule 46 (dangling)]
    $default       reduce using rule 43 (ifelse)

    dangling  go to state 158


State 142

   42 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 42 (while)


State 143

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' . ';'

    ';'  shift, and go to state 159


State 144

   10 typeident: type TOK_IDENT . ';' typeident

    ';'  shift, and go to state 160


State 145

   71 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 161
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 146

   72 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 162


State 147

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 163


State 148

   19 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 19 (plaintype)


State 149

   68 expr: TOK_NEW type '[' expr ']' .

    $default  reduce using rule 68 (expr)


State 150

   24 funcident: ',' type . TOK_IDENT funcident
   25          | ',' type . '[' ']' TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 164
    '['        shift, and go to state 165


State 151

   22 funcident: type TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    ','         shift, and go to state 134

    $default  reduce using rule 21 (funcident)

    type       go to state 135
    plaintype  go to state 32
    funcident  go to state 166


State 152

   23 funcident: type '[' . ']' TOK_IDENT funcident

    ']'  shift, and go to state 167


State 153

   20 function: type TOK_IDENT '(' funcident ')' . block

    '{'  shift, and go to state 26
    ';'  shift, and go to state 27

    block    go to state 168
    optstmt  go to state 35


State 154

   39 vardecl: type TOK_IDENT '[' expr ']' . ';'

    ';'  shift, and go to state 169


State 155

   40 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 40 (vardecl)


State 156

   41 vardecl: type '[' ']' TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 170
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 157

   45 dangling: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 171
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 158

   44 ifelse: TOK_IF '(' expr ')' statement dangling .

    $default  reduce using rule 44 (ifelse)


State 159

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' ';' .

    $default  reduce using rule 8 (structdef)


State 160

   10 typeident: type TOK_IDENT ';' . typeident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18

    $default  reduce using rule 9 (typeident)

    typeident  go to state 172
    type       go to state 127
    plaintype  go to state 32


State 161

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   71 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    ')'        shift, and go to state 173
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 162

   72 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 174


State 163

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 175


State 164

   24 funcident: ',' type TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    ','         shift, and go to state 134

    $default  reduce using rule 21 (funcident)

    type       go to state 135
    plaintype  go to state 32
    funcident  go to state 176


State 165

   25 funcident: ',' type '[' . ']' TOK_IDENT funcident

    ']'  shift, and go to state 177


State 166

   22 funcident: type TOK_IDENT funcident .

    $default  reduce using rule 22 (funcident)


State 167

   23 funcident: type '[' ']' . TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 178


State 168

   20 function: type TOK_IDENT '(' funcident ')' block .

    $default  reduce using rule 20 (function)


State 169

   39 vardecl: type TOK_IDENT '[' expr ']' ';' .

    $default  reduce using rule 39 (vardecl)


State 170

   41 vardecl: type '[' ']' TOK_IDENT '=' expr . ';'
   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    '['        shift, and go to state 77
    ';'        shift, and go to state 179
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 171

   45 dangling: TOK_ELSE statement .

    $default  reduce using rule 45 (dangling)


State 172

   10 typeident: type TOK_IDENT ';' typeident .

    $default  reduce using rule 10 (typeident)


State 173

   71 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 71 (allocator)


State 174

   72 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 72 (allocator)


State 175

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 180


State 176

   24 funcident: ',' type TOK_IDENT funcident .

    $default  reduce using rule 24 (funcident)


State 177

   25 funcident: ',' type '[' ']' . TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 181


State 178

   23 funcident: type '[' ']' TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    ','         shift, and go to state 134

    $default  reduce using rule 21 (funcident)

    type       go to state 135
    plaintype  go to state 32
    funcident  go to state 182


State 179

   41 vardecl: type '[' ']' TOK_IDENT '=' expr ';' .

    $default  reduce using rule 41 (vardecl)


State 180

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 183
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 181

   25 funcident: ',' type '[' ']' TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    ','         shift, and go to state 134

    $default  reduce using rule 21 (funcident)

    type       go to state 135
    plaintype  go to state 32
    funcident  go to state 184


State 182

   23 funcident: type '[' ']' TOK_IDENT funcident .

    $default  reduce using rule 23 (funcident)


State 183

   49 expr: expr . '=' expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '^' expr
   55     | expr . '%' expr
   56     | expr . TOK_GT expr
   57     | expr . TOK_GE expr
   58     | expr . TOK_LT expr
   59     | expr . TOK_LE expr
   60     | expr . TOK_EQ expr
   61     | expr . TOK_NE expr
   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   79 variable: expr . '[' expr ']'
   80         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 70
    TOK_EQ     shift, and go to state 71
    TOK_NE     shift, and go to state 72
    TOK_LT     shift, and go to state 73
    TOK_LE     shift, and go to state 74
    TOK_GT     shift, and go to state 75
    TOK_GE     shift, and go to state 76
    ')'        shift, and go to state 185
    '['        shift, and go to state 77
    '='        shift, and go to state 79
    '+'        shift, and go to state 80
    '-'        shift, and go to state 81
    '*'        shift, and go to state 82
    '/'        shift, and go to state 83
    '%'        shift, and go to state 84
    '^'        shift, and go to state 85


State 184

   25 funcident: ',' type '[' ']' TOK_IDENT funcident .

    $default  reduce using rule 25 (funcident)


State 185

   73 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 73 (allocator)
