Nonterminals useless in grammar

   optexpr


Terminals unused in grammar

   TOK_EQ
   TOK_NE
   TOK_GE
   TOK_NOT
   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   ROOT
   NUMBER
   IDENT
   TOK_TYPE_ID
   TOK_FUNCTION
   TOK_INDEX
   TOK_PARAM


Rules useless in grammar

   69 optexpr: %empty
   70        | '=' expr
   71        | TOK_ELSE statement
   72        | expr optexpr
   73        | ',' expr optexpr


State 16 conflicts: 1 shift/reduce
State 50 conflicts: 5 shift/reduce
State 51 conflicts: 5 shift/reduce
State 90 conflicts: 11 shift/reduce
State 91 conflicts: 11 shift/reduce
State 92 conflicts: 11 shift/reduce
State 93 conflicts: 5 shift/reduce
State 94 conflicts: 5 shift/reduce
State 95 conflicts: 5 shift/reduce
State 96 conflicts: 5 shift/reduce
State 97 conflicts: 5 shift/reduce
State 98 conflicts: 5 shift/reduce
State 131 conflicts: 5 shift/reduce, 1 reduce/reduce
State 132 conflicts: 5 shift/reduce, 18 reduce/reduce
State 133 conflicts: 5 shift/reduce, 18 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' ';'

    9 typeident: %empty
   10          | type TOK_IDENT ';' typeident

   11 type: plaintype
   12     | TOK_ARRAY '<' plaintype '>'

   13 plaintype: TOK_VOID
   14          | TOK_INT
   15          | TOK_STRING
   16          | TOK_PTR '<' TOK_STRUCT TOK_IDENT '>'

   17 function: type TOK_IDENT '(' funcident ')' block

   18 funcident: %empty
   19          | type TOK_IDENT funcident
   20          | ',' type TOK_IDENT funcident

   21 block: '{' optstmt '}'
   22      | ';'

   23 optstmt: %empty
   24        | statement optstmt

   25 statement: vardecl
   26          | block
   27          | while
   28          | ifelse
   29          | return
   30          | expr ';'

   31 vardecl: type TOK_IDENT '=' expr ';'

   32 while: TOK_WHILE '(' expr ')' statement

   33 ifelse: TOK_IF '(' expr ')' statement dangling

   34 dangling: TOK_ELSE statement
   35         | %empty

   36 return: TOK_RETURN expr ';'

   37 expr: expr '=' expr
   38     | expr '+' expr
   39     | expr '-' expr
   40     | expr '*' expr
   41     | expr '/' expr
   42     | expr '^' expr
   43     | expr TOK_GT expr
   44     | expr TOK_LT expr
   45     | expr TOK_LE expr
   46     | '+' expr
   47     | '-' expr
   48     | allocator
   49     | call
   50     | '(' expr ')'
   51     | variable
   52     | constant

   53 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')'
   54          | TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   55          | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   56 call: TOK_IDENT '(' callexpr ')'

   57 callexpr: %empty
   58         | '=' expr
   59         | TOK_ELSE statement
   60         | expr callexpr
   61         | ',' expr callexpr

   62 variable: TOK_IDENT
   63         | expr '[' expr ']'
   64         | expr TOK_ARROW TOK_IDENT

   65 constant: TOK_INTCON
   66         | TOK_CHARCON
   67         | TOK_STRINGCON
   68         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 17 32 33 50 53 54 55 56
')' (41) 17 32 33 50 53 54 55 56
'*' (42) 40
'+' (43) 38 46
',' (44) 20 61
'-' (45) 39 47
'/' (47) 41
';' (59) 6 8 10 22 30 31 36
'<' (60) 12 16 53 54 55
'=' (61) 31 37 58
'>' (62) 12 16 53 54 55
'[' (91) 63
']' (93) 63
'^' (94) 42
'{' (123) 8 21
'}' (125) 5 8 21
error (256) 5 6
TOK_VOID (258) 13
TOK_INT (259) 14
TOK_STRING (260) 15 53
TOK_IF (261) 33
TOK_ELSE (262) 34 59
TOK_WHILE (263) 32
TOK_RETURN (264) 36
TOK_STRUCT (265) 8 16 54
TOK_NULLPTR (266) 68
TOK_ARRAY (267) 12 55
TOK_ARROW (268) 64
TOK_ALLOC (269) 53 54 55
TOK_PTR (270) 16
TOK_EQ (271)
TOK_NE (272)
TOK_LT (273) 44
TOK_LE (274) 45
TOK_GT (275) 43
TOK_GE (276)
TOK_NOT (277)
TOK_IDENT (278) 8 10 16 17 19 20 31 54 56 62 64
TOK_INTCON (279) 65
TOK_CHARCON (280) 66
TOK_STRINGCON (281) 67
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
ROOT (285)
NUMBER (286)
IDENT (287)
TOK_TYPE_ID (288)
TOK_FUNCTION (289)
TOK_INDEX (290)
TOK_PARAM (291)
POS (292)
NEG (293)


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
start (56)
    on left: 1, on right: 0
program (57)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (58)
    on left: 8, on right: 2
typeident (59)
    on left: 9 10, on right: 8 10
type (60)
    on left: 11 12, on right: 10 17 19 20 31
plaintype (61)
    on left: 13 14 15 16, on right: 11 12 55
function (62)
    on left: 17, on right: 3
funcident (63)
    on left: 18 19 20, on right: 17 19 20
block (64)
    on left: 21 22, on right: 17 26
optstmt (65)
    on left: 23 24, on right: 21 24
statement (66)
    on left: 25 26 27 28 29 30, on right: 4 24 32 33 34 59
vardecl (67)
    on left: 31, on right: 25
while (68)
    on left: 32, on right: 27
ifelse (69)
    on left: 33, on right: 28
dangling (70)
    on left: 34 35, on right: 33
return (71)
    on left: 36, on right: 29
expr (72)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52, on right:
    30 31 32 33 36 37 38 39 40 41 42 43 44 45 46 47 50 53 55 58 60
    61 63 64
allocator (73)
    on left: 53 54 55, on right: 48
call (74)
    on left: 56, on right: 49
callexpr (75)
    on left: 57 58 59 60 61, on right: 56 60 61
variable (76)
    on left: 62 63 64, on right: 51
constant (77)
    on left: 65 66 67 68, on right: 52


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    type       go to state 26
    plaintype  go to state 27
    function   go to state 28
    block      go to state 29
    statement  go to state 30
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 40
    ';'  shift, and go to state 41


State 5

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 6

   14 plaintype: TOK_INT .

    $default  reduce using rule 14 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

   33 ifelse: TOK_IF . '(' expr ')' statement dangling

    '('  shift, and go to state 42


State 9

   32 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 43


State 10

   36 return: TOK_RETURN . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 44
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 11

    8 structdef: TOK_STRUCT . TOK_IDENT '{' typeident '}' ';'

    TOK_IDENT  shift, and go to state 45


State 12

   68 constant: TOK_NULLPTR .

    $default  reduce using rule 68 (constant)


State 13

   12 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 46


State 14

   53 allocator: TOK_ALLOC . '<' TOK_STRING '>' '(' expr ')'
   54          | TOK_ALLOC . '<' TOK_STRUCT TOK_IDENT '>' '(' ')'
   55          | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 47


State 15

   16 plaintype: TOK_PTR . '<' TOK_STRUCT TOK_IDENT '>'

    '<'  shift, and go to state 48


State 16

   56 call: TOK_IDENT . '(' callexpr ')'
   62 variable: TOK_IDENT .

    '('  shift, and go to state 49

    '('       [reduce using rule 62 (variable)]
    $default  reduce using rule 62 (variable)


State 17

   65 constant: TOK_INTCON .

    $default  reduce using rule 65 (constant)


State 18

   66 constant: TOK_CHARCON .

    $default  reduce using rule 66 (constant)


State 19

   67 constant: TOK_STRINGCON .

    $default  reduce using rule 67 (constant)


State 20

   46 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 50
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 21

   47 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 51
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 22

   22 block: ';' .

    $default  reduce using rule 22 (block)


State 23

   21 block: '{' . optstmt '}'

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    $default  reduce using rule 23 (optstmt)

    type       go to state 52
    plaintype  go to state 27
    block      go to state 29
    optstmt    go to state 53
    statement  go to state 54
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 24

   50 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 55
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

   17 function: type . TOK_IDENT '(' funcident ')' block
   31 vardecl: type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 56


State 27

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 28

    3 program: program function .

    $default  reduce using rule 3 (program)


State 29

   26 statement: block .

    $default  reduce using rule 26 (statement)


State 30

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 31

   25 statement: vardecl .

    $default  reduce using rule 25 (statement)


State 32

   27 statement: while .

    $default  reduce using rule 27 (statement)


State 33

   28 statement: ifelse .

    $default  reduce using rule 28 (statement)


State 34

   29 statement: return .

    $default  reduce using rule 29 (statement)


State 35

   30 statement: expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ';'        shift, and go to state 67
    '['        shift, and go to state 68


State 36

   48 expr: allocator .

    $default  reduce using rule 48 (expr)


State 37

   49 expr: call .

    $default  reduce using rule 49 (expr)


State 38

   51 expr: variable .

    $default  reduce using rule 51 (expr)


State 39

   52 expr: constant .

    $default  reduce using rule 52 (expr)


State 40

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 41

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 42

   33 ifelse: TOK_IF '(' . expr ')' statement dangling

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 69
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 43

   32 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 70
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 44

   36 return: TOK_RETURN expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ';'        shift, and go to state 71
    '['        shift, and go to state 68


State 45

    8 structdef: TOK_STRUCT TOK_IDENT . '{' typeident '}' ';'

    '{'  shift, and go to state 72


State 46

   12 type: TOK_ARRAY '<' . plaintype '>'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 73


State 47

   53 allocator: TOK_ALLOC '<' . TOK_STRING '>' '(' expr ')'
   54          | TOK_ALLOC '<' . TOK_STRUCT TOK_IDENT '>' '(' ')'
   55          | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRING  shift, and go to state 74
    TOK_STRUCT  shift, and go to state 75
    TOK_ARRAY   shift, and go to state 76


State 48

   16 plaintype: TOK_PTR '<' . TOK_STRUCT TOK_IDENT '>'

    TOK_STRUCT  shift, and go to state 77


State 49

   56 call: TOK_IDENT '(' . callexpr ')'

    TOK_ELSE       shift, and go to state 78
    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '='            shift, and go to state 79
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24
    ','            shift, and go to state 80

    $default  reduce using rule 57 (callexpr)

    expr       go to state 81
    allocator  go to state 36
    call       go to state 37
    callexpr   go to state 82
    variable   go to state 38
    constant   go to state 39


State 50

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | '+' expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 46 (expr)]
    TOK_LT     [reduce using rule 46 (expr)]
    TOK_LE     [reduce using rule 46 (expr)]
    TOK_GT     [reduce using rule 46 (expr)]
    '['        [reduce using rule 46 (expr)]
    $default   reduce using rule 46 (expr)


State 51

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   47     | '-' expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 47 (expr)]
    TOK_LT     [reduce using rule 47 (expr)]
    TOK_LE     [reduce using rule 47 (expr)]
    TOK_GT     [reduce using rule 47 (expr)]
    '['        [reduce using rule 47 (expr)]
    $default   reduce using rule 47 (expr)


State 52

   31 vardecl: type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 83


State 53

   21 block: '{' optstmt . '}'

    '}'  shift, and go to state 84


State 54

   24 optstmt: statement . optstmt

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    $default  reduce using rule 23 (optstmt)

    type       go to state 52
    plaintype  go to state 27
    block      go to state 29
    optstmt    go to state 85
    statement  go to state 54
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 55

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   50     | '(' expr . ')'
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ')'        shift, and go to state 86
    '['        shift, and go to state 68


State 56

   17 function: type TOK_IDENT . '(' funcident ')' block
   31 vardecl: type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 87
    '('  shift, and go to state 88


State 57

   64 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 89


State 58

   44 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 90
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 59

   45 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 91
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 60

   43 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 92
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 61

   37 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 93
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 62

   38 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 94
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 63

   39 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 95
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 64

   40 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 96
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 65

   41 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 97
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 66

   42 expr: expr '^' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 98
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 67

   30 statement: expr ';' .

    $default  reduce using rule 30 (statement)


State 68

   63 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 99
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 69

   33 ifelse: TOK_IF '(' expr . ')' statement dangling
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ')'        shift, and go to state 100
    '['        shift, and go to state 68


State 70

   32 while: TOK_WHILE '(' expr . ')' statement
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ')'        shift, and go to state 101
    '['        shift, and go to state 68


State 71

   36 return: TOK_RETURN expr ';' .

    $default  reduce using rule 36 (return)


State 72

    8 structdef: TOK_STRUCT TOK_IDENT '{' . typeident '}' ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    $default  reduce using rule 9 (typeident)

    typeident  go to state 102
    type       go to state 103
    plaintype  go to state 27


State 73

   12 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 104


State 74

   53 allocator: TOK_ALLOC '<' TOK_STRING . '>' '(' expr ')'

    '>'  shift, and go to state 105


State 75

   54 allocator: TOK_ALLOC '<' TOK_STRUCT . TOK_IDENT '>' '(' ')'

    TOK_IDENT  shift, and go to state 106


State 76

   55 allocator: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 107


State 77

   16 plaintype: TOK_PTR '<' TOK_STRUCT . TOK_IDENT '>'

    TOK_IDENT  shift, and go to state 108


State 78

   59 callexpr: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 52
    plaintype  go to state 27
    block      go to state 29
    statement  go to state 109
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 79

   58 callexpr: '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 110
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 80

   61 callexpr: ',' . expr callexpr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 111
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 81

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   60 callexpr: expr . callexpr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ELSE       shift, and go to state 78
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARROW      shift, and go to state 57
    TOK_ALLOC      shift, and go to state 14
    TOK_LT         shift, and go to state 58
    TOK_LE         shift, and go to state 59
    TOK_GT         shift, and go to state 60
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '='            shift, and go to state 112
    '+'            shift, and go to state 113
    '-'            shift, and go to state 114
    '*'            shift, and go to state 64
    '/'            shift, and go to state 65
    '^'            shift, and go to state 66
    '('            shift, and go to state 24
    ','            shift, and go to state 80
    '['            shift, and go to state 68

    $default  reduce using rule 57 (callexpr)

    expr       go to state 81
    allocator  go to state 36
    call       go to state 37
    callexpr   go to state 115
    variable   go to state 38
    constant   go to state 39


State 82

   56 call: TOK_IDENT '(' callexpr . ')'

    ')'  shift, and go to state 116


State 83

   31 vardecl: type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 87


State 84

   21 block: '{' optstmt '}' .

    $default  reduce using rule 21 (block)


State 85

   24 optstmt: statement optstmt .

    $default  reduce using rule 24 (optstmt)


State 86

   50 expr: '(' expr ')' .

    $default  reduce using rule 50 (expr)


State 87

   31 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 117
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 88

   17 function: type TOK_IDENT '(' . funcident ')' block

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ','         shift, and go to state 118

    $default  reduce using rule 18 (funcident)

    type       go to state 119
    plaintype  go to state 27
    funcident  go to state 120


State 89

   64 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 64 (variable)


State 90

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   44     | expr TOK_LT expr .
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 44 (expr)]
    TOK_LT     [reduce using rule 44 (expr)]
    TOK_LE     [reduce using rule 44 (expr)]
    TOK_GT     [reduce using rule 44 (expr)]
    '='        [reduce using rule 44 (expr)]
    '+'        [reduce using rule 44 (expr)]
    '-'        [reduce using rule 44 (expr)]
    '*'        [reduce using rule 44 (expr)]
    '/'        [reduce using rule 44 (expr)]
    '^'        [reduce using rule 44 (expr)]
    '['        [reduce using rule 44 (expr)]
    $default   reduce using rule 44 (expr)


State 91

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   45     | expr TOK_LE expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 45 (expr)]
    TOK_LT     [reduce using rule 45 (expr)]
    TOK_LE     [reduce using rule 45 (expr)]
    TOK_GT     [reduce using rule 45 (expr)]
    '='        [reduce using rule 45 (expr)]
    '+'        [reduce using rule 45 (expr)]
    '-'        [reduce using rule 45 (expr)]
    '*'        [reduce using rule 45 (expr)]
    '/'        [reduce using rule 45 (expr)]
    '^'        [reduce using rule 45 (expr)]
    '['        [reduce using rule 45 (expr)]
    $default   reduce using rule 45 (expr)


State 92

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   43     | expr TOK_GT expr .
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 43 (expr)]
    TOK_LT     [reduce using rule 43 (expr)]
    TOK_LE     [reduce using rule 43 (expr)]
    TOK_GT     [reduce using rule 43 (expr)]
    '='        [reduce using rule 43 (expr)]
    '+'        [reduce using rule 43 (expr)]
    '-'        [reduce using rule 43 (expr)]
    '*'        [reduce using rule 43 (expr)]
    '/'        [reduce using rule 43 (expr)]
    '^'        [reduce using rule 43 (expr)]
    '['        [reduce using rule 43 (expr)]
    $default   reduce using rule 43 (expr)


State 93

   37 expr: expr . '=' expr
   37     | expr '=' expr .
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 37 (expr)]
    TOK_LT     [reduce using rule 37 (expr)]
    TOK_LE     [reduce using rule 37 (expr)]
    TOK_GT     [reduce using rule 37 (expr)]
    '['        [reduce using rule 37 (expr)]
    $default   reduce using rule 37 (expr)


State 94

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   38     | expr '+' expr .
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 38 (expr)]
    TOK_LT     [reduce using rule 38 (expr)]
    TOK_LE     [reduce using rule 38 (expr)]
    TOK_GT     [reduce using rule 38 (expr)]
    '['        [reduce using rule 38 (expr)]
    $default   reduce using rule 38 (expr)


State 95

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   39     | expr '-' expr .
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 39 (expr)]
    TOK_LT     [reduce using rule 39 (expr)]
    TOK_LE     [reduce using rule 39 (expr)]
    TOK_GT     [reduce using rule 39 (expr)]
    '['        [reduce using rule 39 (expr)]
    $default   reduce using rule 39 (expr)


State 96

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   40     | expr '*' expr .
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 40 (expr)]
    TOK_LT     [reduce using rule 40 (expr)]
    TOK_LE     [reduce using rule 40 (expr)]
    TOK_GT     [reduce using rule 40 (expr)]
    '['        [reduce using rule 40 (expr)]
    $default   reduce using rule 40 (expr)


State 97

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   41     | expr '/' expr .
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 41 (expr)]
    TOK_LT     [reduce using rule 41 (expr)]
    TOK_LE     [reduce using rule 41 (expr)]
    TOK_GT     [reduce using rule 41 (expr)]
    '['        [reduce using rule 41 (expr)]
    $default   reduce using rule 41 (expr)


State 98

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   42     | expr '^' expr .
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 42 (expr)]
    TOK_LT     [reduce using rule 42 (expr)]
    TOK_LE     [reduce using rule 42 (expr)]
    TOK_GT     [reduce using rule 42 (expr)]
    '['        [reduce using rule 42 (expr)]
    $default   reduce using rule 42 (expr)


State 99

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   63         | expr '[' expr . ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68
    ']'        shift, and go to state 121


State 100

   33 ifelse: TOK_IF '(' expr ')' . statement dangling

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 52
    plaintype  go to state 27
    block      go to state 29
    statement  go to state 122
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 101

   32 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 52
    plaintype  go to state 27
    block      go to state 29
    statement  go to state 123
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 102

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident . '}' ';'

    '}'  shift, and go to state 124


State 103

   10 typeident: type . TOK_IDENT ';' typeident

    TOK_IDENT  shift, and go to state 125


State 104

   12 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 12 (type)


State 105

   53 allocator: TOK_ALLOC '<' TOK_STRING '>' . '(' expr ')'

    '('  shift, and go to state 126


State 106

   54 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT . '>' '(' ')'

    '>'  shift, and go to state 127


State 107

   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 128


State 108

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT . '>'

    '>'  shift, and go to state 129


State 109

   59 callexpr: TOK_ELSE statement .

    $default  reduce using rule 59 (callexpr)


State 110

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   58 callexpr: '=' expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    $default  reduce using rule 58 (callexpr)


State 111

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   61 callexpr: ',' expr . callexpr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ELSE       shift, and go to state 78
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARROW      shift, and go to state 57
    TOK_ALLOC      shift, and go to state 14
    TOK_LT         shift, and go to state 58
    TOK_LE         shift, and go to state 59
    TOK_GT         shift, and go to state 60
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '='            shift, and go to state 112
    '+'            shift, and go to state 113
    '-'            shift, and go to state 114
    '*'            shift, and go to state 64
    '/'            shift, and go to state 65
    '^'            shift, and go to state 66
    '('            shift, and go to state 24
    ','            shift, and go to state 80
    '['            shift, and go to state 68

    $default  reduce using rule 57 (callexpr)

    expr       go to state 81
    allocator  go to state 36
    call       go to state 37
    callexpr   go to state 130
    variable   go to state 38
    constant   go to state 39


State 112

   37 expr: expr '=' . expr
   58 callexpr: '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 131
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 113

   38 expr: expr '+' . expr
   46     | '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 132
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 114

   39 expr: expr '-' . expr
   47     | '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 133
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 115

   60 callexpr: expr callexpr .

    $default  reduce using rule 60 (callexpr)


State 116

   56 call: TOK_IDENT '(' callexpr ')' .

    $default  reduce using rule 56 (call)


State 117

   31 vardecl: type TOK_IDENT '=' expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ';'        shift, and go to state 134
    '['        shift, and go to state 68


State 118

   20 funcident: ',' . type TOK_IDENT funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    type       go to state 135
    plaintype  go to state 27


State 119

   19 funcident: type . TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 136


State 120

   17 function: type TOK_IDENT '(' funcident . ')' block

    ')'  shift, and go to state 137


State 121

   63 variable: expr '[' expr ']' .

    $default  reduce using rule 63 (variable)


State 122

   33 ifelse: TOK_IF '(' expr ')' statement . dangling

    TOK_ELSE  shift, and go to state 138

    $default  reduce using rule 35 (dangling)

    dangling  go to state 139


State 123

   32 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 32 (while)


State 124

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' . ';'

    ';'  shift, and go to state 140


State 125

   10 typeident: type TOK_IDENT . ';' typeident

    ';'  shift, and go to state 141


State 126

   53 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 142
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 127

   54 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' . '(' ')'

    '('  shift, and go to state 143


State 128

   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 144


State 129

   16 plaintype: TOK_PTR '<' TOK_STRUCT TOK_IDENT '>' .

    $default  reduce using rule 16 (plaintype)


State 130

   61 callexpr: ',' expr callexpr .

    $default  reduce using rule 61 (callexpr)


State 131

   37 expr: expr . '=' expr
   37     | expr '=' expr .
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   58 callexpr: '=' expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    '['        shift, and go to state 68

    TOK_ARROW  [reduce using rule 37 (expr)]
    TOK_LT     [reduce using rule 37 (expr)]
    TOK_LE     [reduce using rule 37 (expr)]
    TOK_GT     [reduce using rule 37 (expr)]
    ')'        reduce using rule 37 (expr)
    ')'        [reduce using rule 58 (callexpr)]
    '['        [reduce using rule 37 (expr)]
    $default   reduce using rule 37 (expr)


State 132

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   38     | expr '+' expr .
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   46     | '+' expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '['        shift, and go to state 68

    TOK_ELSE       reduce using rule 38 (expr)
    TOK_ELSE       [reduce using rule 46 (expr)]
    TOK_NULLPTR    reduce using rule 38 (expr)
    TOK_NULLPTR    [reduce using rule 46 (expr)]
    TOK_ARROW      [reduce using rule 38 (expr)]
    TOK_ARROW      [reduce using rule 46 (expr)]
    TOK_ALLOC      reduce using rule 38 (expr)
    TOK_ALLOC      [reduce using rule 46 (expr)]
    TOK_LT         [reduce using rule 38 (expr)]
    TOK_LT         [reduce using rule 46 (expr)]
    TOK_LE         [reduce using rule 38 (expr)]
    TOK_LE         [reduce using rule 46 (expr)]
    TOK_GT         [reduce using rule 38 (expr)]
    TOK_GT         [reduce using rule 46 (expr)]
    TOK_IDENT      reduce using rule 38 (expr)
    TOK_IDENT      [reduce using rule 46 (expr)]
    TOK_INTCON     reduce using rule 38 (expr)
    TOK_INTCON     [reduce using rule 46 (expr)]
    TOK_CHARCON    reduce using rule 38 (expr)
    TOK_CHARCON    [reduce using rule 46 (expr)]
    TOK_STRINGCON  reduce using rule 38 (expr)
    TOK_STRINGCON  [reduce using rule 46 (expr)]
    '='            reduce using rule 38 (expr)
    '='            [reduce using rule 46 (expr)]
    '+'            reduce using rule 38 (expr)
    '+'            [reduce using rule 46 (expr)]
    '-'            reduce using rule 38 (expr)
    '-'            [reduce using rule 46 (expr)]
    '*'            reduce using rule 46 (expr)
    '/'            reduce using rule 46 (expr)
    '^'            reduce using rule 46 (expr)
    '('            reduce using rule 38 (expr)
    '('            [reduce using rule 46 (expr)]
    ')'            reduce using rule 38 (expr)
    ')'            [reduce using rule 46 (expr)]
    ','            reduce using rule 38 (expr)
    ','            [reduce using rule 46 (expr)]
    '['            [reduce using rule 38 (expr)]
    '['            [reduce using rule 46 (expr)]
    $default       reduce using rule 38 (expr)


State 133

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   39     | expr '-' expr .
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   47     | '-' expr .
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '['        shift, and go to state 68

    TOK_ELSE       reduce using rule 39 (expr)
    TOK_ELSE       [reduce using rule 47 (expr)]
    TOK_NULLPTR    reduce using rule 39 (expr)
    TOK_NULLPTR    [reduce using rule 47 (expr)]
    TOK_ARROW      [reduce using rule 39 (expr)]
    TOK_ARROW      [reduce using rule 47 (expr)]
    TOK_ALLOC      reduce using rule 39 (expr)
    TOK_ALLOC      [reduce using rule 47 (expr)]
    TOK_LT         [reduce using rule 39 (expr)]
    TOK_LT         [reduce using rule 47 (expr)]
    TOK_LE         [reduce using rule 39 (expr)]
    TOK_LE         [reduce using rule 47 (expr)]
    TOK_GT         [reduce using rule 39 (expr)]
    TOK_GT         [reduce using rule 47 (expr)]
    TOK_IDENT      reduce using rule 39 (expr)
    TOK_IDENT      [reduce using rule 47 (expr)]
    TOK_INTCON     reduce using rule 39 (expr)
    TOK_INTCON     [reduce using rule 47 (expr)]
    TOK_CHARCON    reduce using rule 39 (expr)
    TOK_CHARCON    [reduce using rule 47 (expr)]
    TOK_STRINGCON  reduce using rule 39 (expr)
    TOK_STRINGCON  [reduce using rule 47 (expr)]
    '='            reduce using rule 39 (expr)
    '='            [reduce using rule 47 (expr)]
    '+'            reduce using rule 39 (expr)
    '+'            [reduce using rule 47 (expr)]
    '-'            reduce using rule 39 (expr)
    '-'            [reduce using rule 47 (expr)]
    '*'            reduce using rule 47 (expr)
    '/'            reduce using rule 47 (expr)
    '^'            reduce using rule 47 (expr)
    '('            reduce using rule 39 (expr)
    '('            [reduce using rule 47 (expr)]
    ')'            reduce using rule 39 (expr)
    ')'            [reduce using rule 47 (expr)]
    ','            reduce using rule 39 (expr)
    ','            [reduce using rule 47 (expr)]
    '['            [reduce using rule 39 (expr)]
    '['            [reduce using rule 47 (expr)]
    $default       reduce using rule 39 (expr)


State 134

   31 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 31 (vardecl)


State 135

   20 funcident: ',' type . TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 145


State 136

   19 funcident: type TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ','         shift, and go to state 118

    $default  reduce using rule 18 (funcident)

    type       go to state 119
    plaintype  go to state 27
    funcident  go to state 146


State 137

   17 function: type TOK_IDENT '(' funcident ')' . block

    ';'  shift, and go to state 22
    '{'  shift, and go to state 23

    block  go to state 147


State 138

   34 dangling: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    type       go to state 52
    plaintype  go to state 27
    block      go to state 29
    statement  go to state 148
    vardecl    go to state 31
    while      go to state 32
    ifelse     go to state 33
    return     go to state 34
    expr       go to state 35
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 139

   33 ifelse: TOK_IF '(' expr ')' statement dangling .

    $default  reduce using rule 33 (ifelse)


State 140

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' ';' .

    $default  reduce using rule 8 (structdef)


State 141

   10 typeident: type TOK_IDENT ';' . typeident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    $default  reduce using rule 9 (typeident)

    typeident  go to state 149
    type       go to state 103
    plaintype  go to state 27


State 142

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   53 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr . ')'
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ')'        shift, and go to state 150
    '['        shift, and go to state 68


State 143

   54 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' . ')'

    ')'  shift, and go to state 151


State 144

   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 152


State 145

   20 funcident: ',' type TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ','         shift, and go to state 118

    $default  reduce using rule 18 (funcident)

    type       go to state 119
    plaintype  go to state 27
    funcident  go to state 153


State 146

   19 funcident: type TOK_IDENT funcident .

    $default  reduce using rule 19 (funcident)


State 147

   17 function: type TOK_IDENT '(' funcident ')' block .

    $default  reduce using rule 17 (function)


State 148

   34 dangling: TOK_ELSE statement .

    $default  reduce using rule 34 (dangling)


State 149

   10 typeident: type TOK_IDENT ';' typeident .

    $default  reduce using rule 10 (typeident)


State 150

   53 allocator: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')' .

    $default  reduce using rule 53 (allocator)


State 151

   54 allocator: TOK_ALLOC '<' TOK_STRUCT TOK_IDENT '>' '(' ')' .

    $default  reduce using rule 54 (allocator)


State 152

   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 154


State 153

   20 funcident: ',' type TOK_IDENT funcident .

    $default  reduce using rule 20 (funcident)


State 154

   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_IDENT      shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '+'            shift, and go to state 20
    '-'            shift, and go to state 21
    '('            shift, and go to state 24

    expr       go to state 155
    allocator  go to state 36
    call       go to state 37
    variable   go to state 38
    constant   go to state 39


State 155

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . TOK_GT expr
   44     | expr . TOK_LT expr
   45     | expr . TOK_LE expr
   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   63 variable: expr . '[' expr ']'
   64         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 57
    TOK_LT     shift, and go to state 58
    TOK_LE     shift, and go to state 59
    TOK_GT     shift, and go to state 60
    '='        shift, and go to state 61
    '+'        shift, and go to state 62
    '-'        shift, and go to state 63
    '*'        shift, and go to state 64
    '/'        shift, and go to state 65
    '^'        shift, and go to state 66
    ')'        shift, and go to state 156
    '['        shift, and go to state 68


State 156

   55 allocator: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 55 (allocator)
