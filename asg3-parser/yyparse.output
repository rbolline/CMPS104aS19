Nonterminals useless in grammar

   optexpr


Terminals unused in grammar

   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   ROOT
   NUMBER
   IDENT
   TOK_TYPE_ID
   TOK_FUNCTION
   TOK_INDEX
   TOK_PARAM


Rules useless in grammar

   74 optexpr: %empty
   75        | '=' expr
   76        | TOK_ELSE statement
   77        | expr optexpr
   78        | ',' expr optexpr


State 17 conflicts: 1 shift/reduce
State 51 conflicts: 4 shift/reduce
State 52 conflicts: 4 shift/reduce
State 95 conflicts: 4 shift/reduce
State 96 conflicts: 15 shift/reduce
State 97 conflicts: 4 shift/reduce
State 98 conflicts: 4 shift/reduce
State 99 conflicts: 4 shift/reduce
State 100 conflicts: 4 shift/reduce
State 101 conflicts: 4 shift/reduce
State 102 conflicts: 4 shift/reduce
State 103 conflicts: 4 shift/reduce
State 104 conflicts: 4 shift/reduce
State 105 conflicts: 4 shift/reduce
State 106 conflicts: 4 shift/reduce
State 107 conflicts: 15 shift/reduce
State 140 conflicts: 4 shift/reduce, 1 reduce/reduce
State 141 conflicts: 4 shift/reduce, 18 reduce/reduce
State 142 conflicts: 4 shift/reduce, 18 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' ';'

    9 typeident: %empty
   10          | type TOK_IDENT ';' typeident

   11 type: plaintype
   12     | TOK_ARRAY TOK_LT plaintype TOK_GT

   13 plaintype: TOK_VOID
   14          | TOK_INT
   15          | TOK_STRING
   16          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

   17 function: type TOK_IDENT '(' funcident ')' block

   18 funcident: %empty
   19          | type TOK_IDENT funcident
   20          | ',' type TOK_IDENT funcident

   21 block: '{' optstmt '}'
   22      | ';'

   23 optstmt: optstmt statement
   24        | statement

   25 statement: vardecl
   26          | block
   27          | while
   28          | ifelse
   29          | return
   30          | expr ';'

   31 vardecl: type TOK_IDENT '=' expr ';'

   32 while: TOK_WHILE '(' expr ')' statement

   33 ifelse: TOK_IF '(' expr ')' statement dangling

   34 dangling: TOK_ELSE statement
   35         | %empty

   36 return: TOK_RETURN expr ';'

   37 expr: expr '=' expr
   38     | expr '+' expr
   39     | expr '-' expr
   40     | expr '*' expr
   41     | expr '/' expr
   42     | expr '^' expr
   43     | expr '%' expr
   44     | expr TOK_GT expr
   45     | expr TOK_GE expr
   46     | expr TOK_LT expr
   47     | expr TOK_LE expr
   48     | expr TOK_EQ expr
   49     | expr TOK_NE expr
   50     | '+' expr
   51     | '-' expr
   52     | allocator
   53     | call
   54     | '(' expr ')'
   55     | variable
   56     | constant

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   58          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   59          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   60 call: TOK_IDENT '(' callexpr ')'

   61 callexpr: %empty
   62         | '=' expr
   63         | TOK_ELSE statement
   64         | expr callexpr
   65         | ',' expr callexpr

   66 variable: TOK_IDENT
   67         | expr '[' expr ']'
   68         | expr TOK_ARROW TOK_IDENT

   69 constant: TOK_INTCON
   70         | TOK_CHARCON
   71         | TOK_STRINGCON
   72         | TOK_NOT
   73         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'%' (37) 43
'(' (40) 17 32 33 54 57 58 59 60
')' (41) 17 32 33 54 57 58 59 60
'*' (42) 40
'+' (43) 38 50
',' (44) 20 65
'-' (45) 39 51
'/' (47) 41
';' (59) 6 8 10 22 30 31 36
'=' (61) 31 37 62
'[' (91) 67
']' (93) 67
'^' (94) 42
'{' (123) 8 21
'}' (125) 5 8 21
error (256) 5 6
TOK_VOID (258) 13
TOK_INT (259) 14
TOK_STRING (260) 15 57
TOK_IF (261) 33
TOK_ELSE (262) 34 63
TOK_WHILE (263) 32
TOK_RETURN (264) 36
TOK_STRUCT (265) 8 16 58
TOK_NULLPTR (266) 73
TOK_ARRAY (267) 12 59
TOK_ARROW (268) 68
TOK_ALLOC (269) 57 58 59
TOK_PTR (270) 16
TOK_EQ (271) 48
TOK_NE (272) 49
TOK_LT (273) 12 16 46 57 58 59
TOK_LE (274) 47
TOK_GT (275) 12 16 44 57 58 59
TOK_GE (276) 45
TOK_NOT (277) 72
TOK_IDENT (278) 8 10 16 17 19 20 31 58 60 66 68
TOK_INTCON (279) 69
TOK_CHARCON (280) 70
TOK_STRINGCON (281) 71
TOK_ROOT (282)
TOK_BLOCK (283)
TOK_CALL (284)
ROOT (285)
NUMBER (286)
IDENT (287)
TOK_TYPE_ID (288)
TOK_FUNCTION (289)
TOK_INDEX (290)
TOK_PARAM (291)
POS (292)
NEG (293)


Nonterminals, with rules where they appear

$accept (54)
    on left: 0
start (55)
    on left: 1, on right: 0
program (56)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (57)
    on left: 8, on right: 2
typeident (58)
    on left: 9 10, on right: 8 10
type (59)
    on left: 11 12, on right: 10 17 19 20 31
plaintype (60)
    on left: 13 14 15 16, on right: 11 12 59
function (61)
    on left: 17, on right: 3
funcident (62)
    on left: 18 19 20, on right: 17 19 20
block (63)
    on left: 21 22, on right: 17 26
optstmt (64)
    on left: 23 24, on right: 21 23
statement (65)
    on left: 25 26 27 28 29 30, on right: 4 23 24 32 33 34 63
vardecl (66)
    on left: 31, on right: 25
while (67)
    on left: 32, on right: 27
ifelse (68)
    on left: 33, on right: 28
dangling (69)
    on left: 34 35, on right: 33
return (70)
    on left: 36, on right: 29
expr (71)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
    55 56, on right: 30 31 32 33 36 37 38 39 40 41 42 43 44 45 46 47
    48 49 50 51 54 57 59 62 64 65 67 68
allocator (72)
    on left: 57 58 59, on right: 52
call (73)
    on left: 60, on right: 53
callexpr (74)
    on left: 61 62 63 64 65, on right: 60 64 65
variable (75)
    on left: 66 67 68, on right: 55
constant (76)
    on left: 69 70 71 72 73, on right: 56


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    $end  reduce using rule 1 (start)

    structdef  go to state 26
    type       go to state 27
    plaintype  go to state 28
    function   go to state 29
    block      go to state 30
    statement  go to state 31
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42


State 5

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 6

   14 plaintype: TOK_INT .

    $default  reduce using rule 14 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

   33 ifelse: TOK_IF . '(' expr ')' statement dangling

    '('  shift, and go to state 43


State 9

   32 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 44


State 10

   36 return: TOK_RETURN . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 45
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 11

    8 structdef: TOK_STRUCT . TOK_IDENT '{' typeident '}' ';'

    TOK_IDENT  shift, and go to state 46


State 12

   73 constant: TOK_NULLPTR .

    $default  reduce using rule 73 (constant)


State 13

   12 type: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 47


State 14

   57 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   58          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   59          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 48


State 15

   16 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 49


State 16

   72 constant: TOK_NOT .

    $default  reduce using rule 72 (constant)


State 17

   60 call: TOK_IDENT . '(' callexpr ')'
   66 variable: TOK_IDENT .

    '('  shift, and go to state 50

    '('       [reduce using rule 66 (variable)]
    $default  reduce using rule 66 (variable)


State 18

   69 constant: TOK_INTCON .

    $default  reduce using rule 69 (constant)


State 19

   70 constant: TOK_CHARCON .

    $default  reduce using rule 70 (constant)


State 20

   71 constant: TOK_STRINGCON .

    $default  reduce using rule 71 (constant)


State 21

   50 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 51
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 22

   51 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 52
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 23

   22 block: ';' .

    $default  reduce using rule 22 (block)


State 24

   21 block: '{' . optstmt '}'

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 53
    plaintype  go to state 28
    block      go to state 30
    optstmt    go to state 54
    statement  go to state 55
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 25

   54 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 56
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 26

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 27

   17 function: type . TOK_IDENT '(' funcident ')' block
   31 vardecl: type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 57


State 28

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 29

    3 program: program function .

    $default  reduce using rule 3 (program)


State 30

   26 statement: block .

    $default  reduce using rule 26 (statement)


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   25 statement: vardecl .

    $default  reduce using rule 25 (statement)


State 33

   27 statement: while .

    $default  reduce using rule 27 (statement)


State 34

   28 statement: ifelse .

    $default  reduce using rule 28 (statement)


State 35

   29 statement: return .

    $default  reduce using rule 29 (statement)


State 36

   30 statement: expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ';'        shift, and go to state 71
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 37

   52 expr: allocator .

    $default  reduce using rule 52 (expr)


State 38

   53 expr: call .

    $default  reduce using rule 53 (expr)


State 39

   55 expr: variable .

    $default  reduce using rule 55 (expr)


State 40

   56 expr: constant .

    $default  reduce using rule 56 (expr)


State 41

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 42

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 43

   33 ifelse: TOK_IF '(' . expr ')' statement dangling

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 74
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 44

   32 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 75
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 45

   36 return: TOK_RETURN expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ';'        shift, and go to state 76
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 46

    8 structdef: TOK_STRUCT TOK_IDENT . '{' typeident '}' ';'

    '{'  shift, and go to state 77


State 47

   12 type: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 78


State 48

   57 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   58          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   59          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 79
    TOK_STRUCT  shift, and go to state 80
    TOK_ARRAY   shift, and go to state 81


State 49

   16 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 82


State 50

   60 call: TOK_IDENT '(' . callexpr ')'

    TOK_ELSE       shift, and go to state 83
    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '='            shift, and go to state 84
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25
    ','            shift, and go to state 85

    $default  reduce using rule 61 (callexpr)

    expr       go to state 86
    allocator  go to state 37
    call       go to state 38
    callexpr   go to state 87
    variable   go to state 39
    constant   go to state 40


State 51

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | '+' expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 50 (expr)]
    TOK_NE     [reduce using rule 50 (expr)]
    '%'        [reduce using rule 50 (expr)]
    '['        [reduce using rule 50 (expr)]
    $default   reduce using rule 50 (expr)


State 52

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   51     | '-' expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 51 (expr)]
    TOK_NE     [reduce using rule 51 (expr)]
    '%'        [reduce using rule 51 (expr)]
    '['        [reduce using rule 51 (expr)]
    $default   reduce using rule 51 (expr)


State 53

   31 vardecl: type . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 88


State 54

   21 block: '{' optstmt . '}'
   23 optstmt: optstmt . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '}'            shift, and go to state 89
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 53
    plaintype  go to state 28
    block      go to state 30
    statement  go to state 90
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 55

   24 optstmt: statement .

    $default  reduce using rule 24 (optstmt)


State 56

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   54     | '(' expr . ')'
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ')'        shift, and go to state 91
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 57

   17 function: type TOK_IDENT . '(' funcident ')' block
   31 vardecl: type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 92
    '('  shift, and go to state 93


State 58

   68 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 94


State 59

   48 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 95
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 60

   49 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 96
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 61

   46 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 97
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 62

   47 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 98
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 63

   44 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 99
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 64

   45 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 100
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 65

   37 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 101
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 66

   38 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 102
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 67

   39 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 103
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 68

   40 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 104
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 69

   41 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 105
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 70

   42 expr: expr '^' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 106
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 71

   30 statement: expr ';' .

    $default  reduce using rule 30 (statement)


State 72

   43 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 107
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 73

   67 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 108
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 74

   33 ifelse: TOK_IF '(' expr . ')' statement dangling
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ')'        shift, and go to state 109
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 75

   32 while: TOK_WHILE '(' expr . ')' statement
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ')'        shift, and go to state 110
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 76

   36 return: TOK_RETURN expr ';' .

    $default  reduce using rule 36 (return)


State 77

    8 structdef: TOK_STRUCT TOK_IDENT '{' . typeident '}' ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    $default  reduce using rule 9 (typeident)

    typeident  go to state 111
    type       go to state 112
    plaintype  go to state 28


State 78

   12 type: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 113


State 79

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 114


State 80

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 115


State 81

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 116


State 82

   16 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 117


State 83

   63 callexpr: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 53
    plaintype  go to state 28
    block      go to state 30
    statement  go to state 118
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 84

   62 callexpr: '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 119
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 85

   65 callexpr: ',' . expr callexpr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 120
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 86

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   64 callexpr: expr . callexpr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ELSE       shift, and go to state 83
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARROW      shift, and go to state 58
    TOK_ALLOC      shift, and go to state 14
    TOK_EQ         shift, and go to state 59
    TOK_NE         shift, and go to state 60
    TOK_LT         shift, and go to state 61
    TOK_LE         shift, and go to state 62
    TOK_GT         shift, and go to state 63
    TOK_GE         shift, and go to state 64
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '='            shift, and go to state 121
    '+'            shift, and go to state 122
    '-'            shift, and go to state 123
    '*'            shift, and go to state 68
    '/'            shift, and go to state 69
    '^'            shift, and go to state 70
    '('            shift, and go to state 25
    ','            shift, and go to state 85
    '%'            shift, and go to state 72
    '['            shift, and go to state 73

    $default  reduce using rule 61 (callexpr)

    expr       go to state 86
    allocator  go to state 37
    call       go to state 38
    callexpr   go to state 124
    variable   go to state 39
    constant   go to state 40


State 87

   60 call: TOK_IDENT '(' callexpr . ')'

    ')'  shift, and go to state 125


State 88

   31 vardecl: type TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 92


State 89

   21 block: '{' optstmt '}' .

    $default  reduce using rule 21 (block)


State 90

   23 optstmt: optstmt statement .

    $default  reduce using rule 23 (optstmt)


State 91

   54 expr: '(' expr ')' .

    $default  reduce using rule 54 (expr)


State 92

   31 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 126
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 93

   17 function: type TOK_IDENT '(' . funcident ')' block

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ','         shift, and go to state 127

    $default  reduce using rule 18 (funcident)

    type       go to state 128
    plaintype  go to state 28
    funcident  go to state 129


State 94

   68 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 68 (variable)


State 95

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   48     | expr TOK_EQ expr .
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 48 (expr)]
    TOK_NE     [reduce using rule 48 (expr)]
    '%'        [reduce using rule 48 (expr)]
    '['        [reduce using rule 48 (expr)]
    $default   reduce using rule 48 (expr)


State 96

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   49     | expr TOK_NE expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 49 (expr)]
    TOK_EQ     [reduce using rule 49 (expr)]
    TOK_NE     [reduce using rule 49 (expr)]
    TOK_LT     [reduce using rule 49 (expr)]
    TOK_LE     [reduce using rule 49 (expr)]
    TOK_GT     [reduce using rule 49 (expr)]
    TOK_GE     [reduce using rule 49 (expr)]
    '='        [reduce using rule 49 (expr)]
    '+'        [reduce using rule 49 (expr)]
    '-'        [reduce using rule 49 (expr)]
    '*'        [reduce using rule 49 (expr)]
    '/'        [reduce using rule 49 (expr)]
    '^'        [reduce using rule 49 (expr)]
    '%'        [reduce using rule 49 (expr)]
    '['        [reduce using rule 49 (expr)]
    $default   reduce using rule 49 (expr)


State 97

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   46     | expr TOK_LT expr .
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 46 (expr)]
    TOK_NE     [reduce using rule 46 (expr)]
    '%'        [reduce using rule 46 (expr)]
    '['        [reduce using rule 46 (expr)]
    $default   reduce using rule 46 (expr)


State 98

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   47     | expr TOK_LE expr .
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 47 (expr)]
    TOK_NE     [reduce using rule 47 (expr)]
    '%'        [reduce using rule 47 (expr)]
    '['        [reduce using rule 47 (expr)]
    $default   reduce using rule 47 (expr)


State 99

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   44     | expr TOK_GT expr .
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 44 (expr)]
    TOK_NE     [reduce using rule 44 (expr)]
    '%'        [reduce using rule 44 (expr)]
    '['        [reduce using rule 44 (expr)]
    $default   reduce using rule 44 (expr)


State 100

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   45     | expr TOK_GE expr .
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 45 (expr)]
    TOK_NE     [reduce using rule 45 (expr)]
    '%'        [reduce using rule 45 (expr)]
    '['        [reduce using rule 45 (expr)]
    $default   reduce using rule 45 (expr)


State 101

   37 expr: expr . '=' expr
   37     | expr '=' expr .
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 37 (expr)]
    TOK_NE     [reduce using rule 37 (expr)]
    '%'        [reduce using rule 37 (expr)]
    '['        [reduce using rule 37 (expr)]
    $default   reduce using rule 37 (expr)


State 102

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   38     | expr '+' expr .
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 38 (expr)]
    TOK_NE     [reduce using rule 38 (expr)]
    '%'        [reduce using rule 38 (expr)]
    '['        [reduce using rule 38 (expr)]
    $default   reduce using rule 38 (expr)


State 103

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   39     | expr '-' expr .
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 39 (expr)]
    TOK_NE     [reduce using rule 39 (expr)]
    '%'        [reduce using rule 39 (expr)]
    '['        [reduce using rule 39 (expr)]
    $default   reduce using rule 39 (expr)


State 104

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   40     | expr '*' expr .
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 40 (expr)]
    TOK_NE     [reduce using rule 40 (expr)]
    '%'        [reduce using rule 40 (expr)]
    '['        [reduce using rule 40 (expr)]
    $default   reduce using rule 40 (expr)


State 105

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   41     | expr '/' expr .
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 41 (expr)]
    TOK_NE     [reduce using rule 41 (expr)]
    '%'        [reduce using rule 41 (expr)]
    '['        [reduce using rule 41 (expr)]
    $default   reduce using rule 41 (expr)


State 106

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   42     | expr '^' expr .
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 42 (expr)]
    TOK_NE     [reduce using rule 42 (expr)]
    '%'        [reduce using rule 42 (expr)]
    '['        [reduce using rule 42 (expr)]
    $default   reduce using rule 42 (expr)


State 107

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   43     | expr '%' expr .
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 43 (expr)]
    TOK_EQ     [reduce using rule 43 (expr)]
    TOK_NE     [reduce using rule 43 (expr)]
    TOK_LT     [reduce using rule 43 (expr)]
    TOK_LE     [reduce using rule 43 (expr)]
    TOK_GT     [reduce using rule 43 (expr)]
    TOK_GE     [reduce using rule 43 (expr)]
    '='        [reduce using rule 43 (expr)]
    '+'        [reduce using rule 43 (expr)]
    '-'        [reduce using rule 43 (expr)]
    '*'        [reduce using rule 43 (expr)]
    '/'        [reduce using rule 43 (expr)]
    '^'        [reduce using rule 43 (expr)]
    '%'        [reduce using rule 43 (expr)]
    '['        [reduce using rule 43 (expr)]
    $default   reduce using rule 43 (expr)


State 108

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   67         | expr '[' expr . ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73
    ']'        shift, and go to state 130


State 109

   33 ifelse: TOK_IF '(' expr ')' . statement dangling

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 53
    plaintype  go to state 28
    block      go to state 30
    statement  go to state 131
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 110

   32 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 53
    plaintype  go to state 28
    block      go to state 30
    statement  go to state 132
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 111

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident . '}' ';'

    '}'  shift, and go to state 133


State 112

   10 typeident: type . TOK_IDENT ';' typeident

    TOK_IDENT  shift, and go to state 134


State 113

   12 type: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 12 (type)


State 114

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 135


State 115

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 136


State 116

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_PTR     shift, and go to state 15

    plaintype  go to state 137


State 117

   16 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 138


State 118

   63 callexpr: TOK_ELSE statement .

    $default  reduce using rule 63 (callexpr)


State 119

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   62 callexpr: '=' expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    $default  reduce using rule 62 (callexpr)


State 120

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   65 callexpr: ',' expr . callexpr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ELSE       shift, and go to state 83
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARROW      shift, and go to state 58
    TOK_ALLOC      shift, and go to state 14
    TOK_EQ         shift, and go to state 59
    TOK_NE         shift, and go to state 60
    TOK_LT         shift, and go to state 61
    TOK_LE         shift, and go to state 62
    TOK_GT         shift, and go to state 63
    TOK_GE         shift, and go to state 64
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '='            shift, and go to state 121
    '+'            shift, and go to state 122
    '-'            shift, and go to state 123
    '*'            shift, and go to state 68
    '/'            shift, and go to state 69
    '^'            shift, and go to state 70
    '('            shift, and go to state 25
    ','            shift, and go to state 85
    '%'            shift, and go to state 72
    '['            shift, and go to state 73

    $default  reduce using rule 61 (callexpr)

    expr       go to state 86
    allocator  go to state 37
    call       go to state 38
    callexpr   go to state 139
    variable   go to state 39
    constant   go to state 40


State 121

   37 expr: expr '=' . expr
   62 callexpr: '=' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 140
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 122

   38 expr: expr '+' . expr
   50     | '+' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 141
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 123

   39 expr: expr '-' . expr
   51     | '-' . expr

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 142
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 124

   64 callexpr: expr callexpr .

    $default  reduce using rule 64 (callexpr)


State 125

   60 call: TOK_IDENT '(' callexpr ')' .

    $default  reduce using rule 60 (call)


State 126

   31 vardecl: type TOK_IDENT '=' expr . ';'
   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ';'        shift, and go to state 143
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 127

   20 funcident: ',' . type TOK_IDENT funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    type       go to state 144
    plaintype  go to state 28


State 128

   19 funcident: type . TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 145


State 129

   17 function: type TOK_IDENT '(' funcident . ')' block

    ')'  shift, and go to state 146


State 130

   67 variable: expr '[' expr ']' .

    $default  reduce using rule 67 (variable)


State 131

   33 ifelse: TOK_IF '(' expr ')' statement . dangling

    TOK_ELSE  shift, and go to state 147

    $default  reduce using rule 35 (dangling)

    dangling  go to state 148


State 132

   32 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 32 (while)


State 133

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' . ';'

    ';'  shift, and go to state 149


State 134

   10 typeident: type TOK_IDENT . ';' typeident

    ';'  shift, and go to state 150


State 135

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 151
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 136

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 152


State 137

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 153


State 138

   16 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 16 (plaintype)


State 139

   65 callexpr: ',' expr callexpr .

    $default  reduce using rule 65 (callexpr)


State 140

   37 expr: expr . '=' expr
   37     | expr '=' expr .
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   62 callexpr: '=' expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ARROW  [reduce using rule 37 (expr)]
    TOK_NE     [reduce using rule 37 (expr)]
    ')'        reduce using rule 37 (expr)
    ')'        [reduce using rule 62 (callexpr)]
    '%'        [reduce using rule 37 (expr)]
    '['        [reduce using rule 37 (expr)]
    $default   reduce using rule 37 (expr)


State 141

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   38     | expr '+' expr .
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   50     | '+' expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ELSE       reduce using rule 38 (expr)
    TOK_ELSE       [reduce using rule 50 (expr)]
    TOK_NULLPTR    reduce using rule 38 (expr)
    TOK_NULLPTR    [reduce using rule 50 (expr)]
    TOK_ARROW      [reduce using rule 38 (expr)]
    TOK_ARROW      [reduce using rule 50 (expr)]
    TOK_ALLOC      reduce using rule 38 (expr)
    TOK_ALLOC      [reduce using rule 50 (expr)]
    TOK_EQ         reduce using rule 50 (expr)
    TOK_NE         [reduce using rule 38 (expr)]
    TOK_NE         [reduce using rule 50 (expr)]
    TOK_LT         reduce using rule 50 (expr)
    TOK_LE         reduce using rule 50 (expr)
    TOK_GT         reduce using rule 50 (expr)
    TOK_GE         reduce using rule 50 (expr)
    TOK_NOT        reduce using rule 38 (expr)
    TOK_NOT        [reduce using rule 50 (expr)]
    TOK_IDENT      reduce using rule 38 (expr)
    TOK_IDENT      [reduce using rule 50 (expr)]
    TOK_INTCON     reduce using rule 38 (expr)
    TOK_INTCON     [reduce using rule 50 (expr)]
    TOK_CHARCON    reduce using rule 38 (expr)
    TOK_CHARCON    [reduce using rule 50 (expr)]
    TOK_STRINGCON  reduce using rule 38 (expr)
    TOK_STRINGCON  [reduce using rule 50 (expr)]
    '='            reduce using rule 38 (expr)
    '='            [reduce using rule 50 (expr)]
    '+'            reduce using rule 38 (expr)
    '+'            [reduce using rule 50 (expr)]
    '-'            reduce using rule 38 (expr)
    '-'            [reduce using rule 50 (expr)]
    '*'            reduce using rule 50 (expr)
    '/'            reduce using rule 50 (expr)
    '^'            reduce using rule 50 (expr)
    '('            reduce using rule 38 (expr)
    '('            [reduce using rule 50 (expr)]
    ')'            reduce using rule 38 (expr)
    ')'            [reduce using rule 50 (expr)]
    ','            reduce using rule 38 (expr)
    ','            [reduce using rule 50 (expr)]
    '%'            [reduce using rule 38 (expr)]
    '%'            [reduce using rule 50 (expr)]
    '['            [reduce using rule 38 (expr)]
    '['            [reduce using rule 50 (expr)]
    $default       reduce using rule 38 (expr)


State 142

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   39     | expr '-' expr .
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   51     | '-' expr .
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_NE     shift, and go to state 60
    '%'        shift, and go to state 72
    '['        shift, and go to state 73

    TOK_ELSE       reduce using rule 39 (expr)
    TOK_ELSE       [reduce using rule 51 (expr)]
    TOK_NULLPTR    reduce using rule 39 (expr)
    TOK_NULLPTR    [reduce using rule 51 (expr)]
    TOK_ARROW      [reduce using rule 39 (expr)]
    TOK_ARROW      [reduce using rule 51 (expr)]
    TOK_ALLOC      reduce using rule 39 (expr)
    TOK_ALLOC      [reduce using rule 51 (expr)]
    TOK_EQ         reduce using rule 51 (expr)
    TOK_NE         [reduce using rule 39 (expr)]
    TOK_NE         [reduce using rule 51 (expr)]
    TOK_LT         reduce using rule 51 (expr)
    TOK_LE         reduce using rule 51 (expr)
    TOK_GT         reduce using rule 51 (expr)
    TOK_GE         reduce using rule 51 (expr)
    TOK_NOT        reduce using rule 39 (expr)
    TOK_NOT        [reduce using rule 51 (expr)]
    TOK_IDENT      reduce using rule 39 (expr)
    TOK_IDENT      [reduce using rule 51 (expr)]
    TOK_INTCON     reduce using rule 39 (expr)
    TOK_INTCON     [reduce using rule 51 (expr)]
    TOK_CHARCON    reduce using rule 39 (expr)
    TOK_CHARCON    [reduce using rule 51 (expr)]
    TOK_STRINGCON  reduce using rule 39 (expr)
    TOK_STRINGCON  [reduce using rule 51 (expr)]
    '='            reduce using rule 39 (expr)
    '='            [reduce using rule 51 (expr)]
    '+'            reduce using rule 39 (expr)
    '+'            [reduce using rule 51 (expr)]
    '-'            reduce using rule 39 (expr)
    '-'            [reduce using rule 51 (expr)]
    '*'            reduce using rule 51 (expr)
    '/'            reduce using rule 51 (expr)
    '^'            reduce using rule 51 (expr)
    '('            reduce using rule 39 (expr)
    '('            [reduce using rule 51 (expr)]
    ')'            reduce using rule 39 (expr)
    ')'            [reduce using rule 51 (expr)]
    ','            reduce using rule 39 (expr)
    ','            [reduce using rule 51 (expr)]
    '%'            [reduce using rule 39 (expr)]
    '%'            [reduce using rule 51 (expr)]
    '['            [reduce using rule 39 (expr)]
    '['            [reduce using rule 51 (expr)]
    $default       reduce using rule 39 (expr)


State 143

   31 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 31 (vardecl)


State 144

   20 funcident: ',' type . TOK_IDENT funcident

    TOK_IDENT  shift, and go to state 154


State 145

   19 funcident: type TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ','         shift, and go to state 127

    $default  reduce using rule 18 (funcident)

    type       go to state 128
    plaintype  go to state 28
    funcident  go to state 155


State 146

   17 function: type TOK_IDENT '(' funcident ')' . block

    ';'  shift, and go to state 23
    '{'  shift, and go to state 24

    block  go to state 156


State 147

   34 dangling: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_IF         shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_NULLPTR    shift, and go to state 12
    TOK_ARRAY      shift, and go to state 13
    TOK_ALLOC      shift, and go to state 14
    TOK_PTR        shift, and go to state 15
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    ';'            shift, and go to state 23
    '{'            shift, and go to state 24
    '('            shift, and go to state 25

    type       go to state 53
    plaintype  go to state 28
    block      go to state 30
    statement  go to state 157
    vardecl    go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    expr       go to state 36
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 148

   33 ifelse: TOK_IF '(' expr ')' statement dangling .

    $default  reduce using rule 33 (ifelse)


State 149

    8 structdef: TOK_STRUCT TOK_IDENT '{' typeident '}' ';' .

    $default  reduce using rule 8 (structdef)


State 150

   10 typeident: type TOK_IDENT ';' . typeident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15

    $default  reduce using rule 9 (typeident)

    typeident  go to state 158
    type       go to state 112
    plaintype  go to state 28


State 151

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ')'        shift, and go to state 159
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 152

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 160


State 153

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 161


State 154

   20 funcident: ',' type TOK_IDENT . funcident

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_ARRAY   shift, and go to state 13
    TOK_PTR     shift, and go to state 15
    ','         shift, and go to state 127

    $default  reduce using rule 18 (funcident)

    type       go to state 128
    plaintype  go to state 28
    funcident  go to state 162


State 155

   19 funcident: type TOK_IDENT funcident .

    $default  reduce using rule 19 (funcident)


State 156

   17 function: type TOK_IDENT '(' funcident ')' block .

    $default  reduce using rule 17 (function)


State 157

   34 dangling: TOK_ELSE statement .

    $default  reduce using rule 34 (dangling)


State 158

   10 typeident: type TOK_IDENT ';' typeident .

    $default  reduce using rule 10 (typeident)


State 159

   57 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 57 (allocator)


State 160

   58 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 58 (allocator)


State 161

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 163


State 162

   20 funcident: ',' type TOK_IDENT funcident .

    $default  reduce using rule 20 (funcident)


State 163

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 12
    TOK_ALLOC      shift, and go to state 14
    TOK_NOT        shift, and go to state 16
    TOK_IDENT      shift, and go to state 17
    TOK_INTCON     shift, and go to state 18
    TOK_CHARCON    shift, and go to state 19
    TOK_STRINGCON  shift, and go to state 20
    '+'            shift, and go to state 21
    '-'            shift, and go to state 22
    '('            shift, and go to state 25

    expr       go to state 164
    allocator  go to state 37
    call       go to state 38
    variable   go to state 39
    constant   go to state 40


State 164

   37 expr: expr . '=' expr
   38     | expr . '+' expr
   39     | expr . '-' expr
   40     | expr . '*' expr
   41     | expr . '/' expr
   42     | expr . '^' expr
   43     | expr . '%' expr
   44     | expr . TOK_GT expr
   45     | expr . TOK_GE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_EQ expr
   49     | expr . TOK_NE expr
   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   67 variable: expr . '[' expr ']'
   68         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 58
    TOK_EQ     shift, and go to state 59
    TOK_NE     shift, and go to state 60
    TOK_LT     shift, and go to state 61
    TOK_LE     shift, and go to state 62
    TOK_GT     shift, and go to state 63
    TOK_GE     shift, and go to state 64
    '='        shift, and go to state 65
    '+'        shift, and go to state 66
    '-'        shift, and go to state 67
    '*'        shift, and go to state 68
    '/'        shift, and go to state 69
    '^'        shift, and go to state 70
    ')'        shift, and go to state 165
    '%'        shift, and go to state 72
    '['        shift, and go to state 73


State 165

   59 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 59 (allocator)
