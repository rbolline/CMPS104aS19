Terminals unused in grammar

   TOK_ROOT
   TOK_BLOCK
   TOK_CALL
   ROOT
   NUMBER
   IDENT
   TOK_TYPE_ID
   TOK_FUNCTION
   TOK_INDEX
   TOK_PARAM
   '.'
   '!'


Rules useless in parser due to conflicts

   47 dangling: %empty


State 19 conflicts: 2 shift/reduce
State 30 conflicts: 8 shift/reduce
State 57 conflicts: 15 shift/reduce
State 64 conflicts: 1 shift/reduce
State 65 conflicts: 1 shift/reduce
State 70 conflicts: 1 shift/reduce
State 114 conflicts: 1 shift/reduce
State 115 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 117 conflicts: 1 shift/reduce
State 118 conflicts: 1 shift/reduce
State 119 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 122 conflicts: 1 shift/reduce
State 123 conflicts: 1 shift/reduce
State 124 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce
State 126 conflicts: 1 shift/reduce
State 127 conflicts: 1 shift/reduce
State 144 conflicts: 28 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT TOK_IDENT '{'
    9          | structdef type TOK_IDENT ';'
   10          | structdef '}' ';'

   11 type: plaintype
   12     | TOK_ARRAY TOK_LT plaintype TOK_GT

   13 plaintype: TOK_VOID
   14          | TOK_INT
   15          | TOK_STRING
   16          | TOK_BOOL
   17          | TOK_REF
   18          | TOK_CHAR
   19          | TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   20          | TOK_PTR TOK_LT TOK_IDENT TOK_GT

   21 function: type TOK_IDENT '(' funcident ')' block

   22 funcident: %empty
   23          | funcident type TOK_IDENT
   24          | funcident type '[' ']' TOK_IDENT
   25          | funcident ',' type TOK_IDENT
   26          | funcident ',' type '[' ']' TOK_IDENT

   27 block: optstmt '}'
   28      | optstmt '}' ';'
   29      | '{' '}'
   30      | ';'

   31 optstmt: optstmt statement
   32        | '{' statement

   33 statement: vardecl
   34          | block
   35          | while
   36          | ifelse
   37          | return
   38          | expr ';'

   39 vardecl: type TOK_IDENT ';'
   40        | type TOK_IDENT '[' expr ']' ';'
   41        | type TOK_IDENT '=' expr ';'
   42        | type '[' ']' TOK_IDENT '=' expr ';'

   43 while: TOK_WHILE '(' expr ')' statement

   44 ifelse: TOK_IF '(' expr ')' statement
   45       | TOK_IF '(' expr ')' statement dangling

   46 dangling: TOK_ELSE statement
   47         | %empty

   48 return: TOK_RETURN ';'
   49       | TOK_RETURN expr ';'

   50 expr: expr '=' expr
   51     | expr '+' expr
   52     | expr '-' expr
   53     | expr '*' expr
   54     | expr '/' expr
   55     | expr '^' expr
   56     | expr '%' expr
   57     | expr TOK_GT expr
   58     | expr TOK_GE expr
   59     | expr TOK_LT expr
   60     | expr TOK_LE expr
   61     | expr TOK_EQ expr
   62     | expr TOK_NE expr
   63     | '+' expr
   64     | '-' expr
   65     | allocator
   66     | call
   67     | '(' expr ')'
   68     | TOK_NOT expr
   69     | TOK_NEW type '[' expr ']'
   70     | variable
   71     | constant

   72 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')'
   73          | TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   74          | TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

   75 call: callexpr ')'
   76     | TOK_IDENT '(' ')'

   77 callexpr: TOK_IDENT '(' expr
   78         | callexpr ',' expr

   79 variable: TOK_IDENT
   80         | expr '[' expr ']'
   81         | expr TOK_ARROW TOK_IDENT

   82 constant: TOK_INTCON
   83         | TOK_CHARCON
   84         | TOK_STRINGCON
   85         | TOK_NOT
   86         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37) 56
'(' (40) 21 43 44 45 67 72 73 74 76 77
')' (41) 21 43 44 45 67 72 73 74 75 76
'*' (42) 53
'+' (43) 51 63
',' (44) 25 26 78
'-' (45) 52 64
'.' (46)
'/' (47) 54
';' (59) 6 9 10 28 30 38 39 40 41 42 48 49
'=' (61) 41 42 50
'[' (91) 24 26 40 42 69 80
']' (93) 24 26 40 42 69 80
'^' (94) 55
'{' (123) 8 29 32
'}' (125) 5 10 27 28 29
error (256) 5 6
TOK_VOID (258) 13
TOK_INT (259) 14
TOK_STRING (260) 15 72
TOK_BOOL (261) 16
TOK_REF (262) 17
TOK_CHAR (263) 18
TOK_IF (264) 44 45
TOK_ELSE (265) 46
TOK_WHILE (266) 43
TOK_RETURN (267) 48 49
TOK_STRUCT (268) 8 19 73
TOK_NULLPTR (269) 86
TOK_ARRAY (270) 12 74
TOK_ARROW (271) 81
TOK_ALLOC (272) 72 73 74
TOK_PTR (273) 19 20
TOK_EQ (274) 61
TOK_NE (275) 62
TOK_LT (276) 12 19 20 59 72 73 74
TOK_LE (277) 60
TOK_GT (278) 12 19 20 57 72 73 74
TOK_GE (279) 58
TOK_NOT (280) 68 85
TOK_IDENT (281) 8 9 19 20 21 23 24 25 26 39 40 41 42 73 76 77 79 81
TOK_INTCON (282) 82
TOK_CHARCON (283) 83
TOK_STRINGCON (284) 84
TOK_ROOT (285)
TOK_BLOCK (286)
TOK_CALL (287)
TOK_NEW (288) 69
ROOT (289)
NUMBER (290)
IDENT (291)
TOK_TYPE_ID (292)
TOK_FUNCTION (293)
TOK_INDEX (294)
TOK_PARAM (295)
POS (296)
NEG (297)


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
start (61)
    on left: 1, on right: 0
program (62)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (63)
    on left: 8 9 10, on right: 2 9 10
type (64)
    on left: 11 12, on right: 9 21 23 24 25 26 39 40 41 42 69
plaintype (65)
    on left: 13 14 15 16 17 18 19 20, on right: 11 12 74
function (66)
    on left: 21, on right: 3
funcident (67)
    on left: 22 23 24 25 26, on right: 21 23 24 25 26
block (68)
    on left: 27 28 29 30, on right: 21 34
optstmt (69)
    on left: 31 32, on right: 27 28 31
statement (70)
    on left: 33 34 35 36 37 38, on right: 4 31 32 43 44 45 46
vardecl (71)
    on left: 39 40 41 42, on right: 33
while (72)
    on left: 43, on right: 35
ifelse (73)
    on left: 44 45, on right: 36
dangling (74)
    on left: 46 47, on right: 45
return (75)
    on left: 48 49, on right: 37
expr (76)
    on left: 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67
    68 69 70 71, on right: 38 40 41 42 43 44 45 49 50 51 52 53 54 55
    56 57 58 59 60 61 62 63 64 67 68 69 72 74 77 78 80 81
allocator (77)
    on left: 72 73 74, on right: 65
call (78)
    on left: 75 76, on right: 66
callexpr (79)
    on left: 77 78, on right: 75 78
variable (80)
    on left: 79 80 81, on right: 70
constant (81)
    on left: 82 83 84 85 86, on right: 71


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_STRUCT     shift, and go to state 14
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef  go to state 30
    type       go to state 31
    plaintype  go to state 32
    function   go to state 33
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 36
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 47
    ';'  shift, and go to state 48


State 5

   13 plaintype: TOK_VOID .

    $default  reduce using rule 13 (plaintype)


State 6

   14 plaintype: TOK_INT .

    $default  reduce using rule 14 (plaintype)


State 7

   15 plaintype: TOK_STRING .

    $default  reduce using rule 15 (plaintype)


State 8

   16 plaintype: TOK_BOOL .

    $default  reduce using rule 16 (plaintype)


State 9

   17 plaintype: TOK_REF .

    $default  reduce using rule 17 (plaintype)


State 10

   18 plaintype: TOK_CHAR .

    $default  reduce using rule 18 (plaintype)


State 11

   44 ifelse: TOK_IF . '(' expr ')' statement
   45       | TOK_IF . '(' expr ')' statement dangling

    '('  shift, and go to state 49


State 12

   43 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 50


State 13

   48 return: TOK_RETURN . ';'
   49       | TOK_RETURN . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    ';'            shift, and go to state 51
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 52
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 14

    8 structdef: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 53


State 15

   86 constant: TOK_NULLPTR .

    $default  reduce using rule 86 (constant)


State 16

   12 type: TOK_ARRAY . TOK_LT plaintype TOK_GT

    TOK_LT  shift, and go to state 54


State 17

   72 allocator: TOK_ALLOC . TOK_LT TOK_STRING TOK_GT '(' expr ')'
   73          | TOK_ALLOC . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   74          | TOK_ALLOC . TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 55


State 18

   19 plaintype: TOK_PTR . TOK_LT TOK_STRUCT TOK_IDENT TOK_GT
   20          | TOK_PTR . TOK_LT TOK_IDENT TOK_GT

    TOK_LT  shift, and go to state 56


State 19

   68 expr: TOK_NOT . expr
   85 constant: TOK_NOT .

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    '+'       [reduce using rule 85 (constant)]
    '-'       [reduce using rule 85 (constant)]
    $default  reduce using rule 85 (constant)

    expr       go to state 57
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 20

   76 call: TOK_IDENT . '(' ')'
   77 callexpr: TOK_IDENT . '(' expr
   79 variable: TOK_IDENT .

    '('  shift, and go to state 58

    $default  reduce using rule 79 (variable)


State 21

   82 constant: TOK_INTCON .

    $default  reduce using rule 82 (constant)


State 22

   83 constant: TOK_CHARCON .

    $default  reduce using rule 83 (constant)


State 23

   84 constant: TOK_STRINGCON .

    $default  reduce using rule 84 (constant)


State 24

   69 expr: TOK_NEW . type '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18

    type       go to state 59
    plaintype  go to state 32


State 25

   67 expr: '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 60
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 26

   29 block: '{' . '}'
   32 optstmt: '{' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    '}'            shift, and go to state 61
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 63
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 27

   30 block: ';' .

    $default  reduce using rule 30 (block)


State 28

   63 expr: '+' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 64
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 29

   64 expr: '-' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 65
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 30

    2 program: program structdef .
    9 structdef: structdef . type TOK_IDENT ';'
   10          | structdef . '}' ';'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    '}'         shift, and go to state 66

    TOK_VOID    [reduce using rule 2 (program)]
    TOK_INT     [reduce using rule 2 (program)]
    TOK_STRING  [reduce using rule 2 (program)]
    TOK_BOOL    [reduce using rule 2 (program)]
    TOK_REF     [reduce using rule 2 (program)]
    TOK_CHAR    [reduce using rule 2 (program)]
    TOK_ARRAY   [reduce using rule 2 (program)]
    TOK_PTR     [reduce using rule 2 (program)]
    $default    reduce using rule 2 (program)

    type       go to state 67
    plaintype  go to state 32


State 31

   21 function: type . TOK_IDENT '(' funcident ')' block
   39 vardecl: type . TOK_IDENT ';'
   40        | type . TOK_IDENT '[' expr ']' ';'
   41        | type . TOK_IDENT '=' expr ';'
   42        | type . '[' ']' TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 68
    '['        shift, and go to state 69


State 32

   11 type: plaintype .

    $default  reduce using rule 11 (type)


State 33

    3 program: program function .

    $default  reduce using rule 3 (program)


State 34

   34 statement: block .

    $default  reduce using rule 34 (statement)


State 35

   27 block: optstmt . '}'
   28      | optstmt . '}' ';'
   31 optstmt: optstmt . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    '}'            shift, and go to state 70
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 71
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 36

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 37

   33 statement: vardecl .

    $default  reduce using rule 33 (statement)


State 38

   35 statement: while .

    $default  reduce using rule 35 (statement)


State 39

   36 statement: ifelse .

    $default  reduce using rule 36 (statement)


State 40

   37 statement: return .

    $default  reduce using rule 37 (statement)


State 41

   38 statement: expr . ';'
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ';'        shift, and go to state 80
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 42

   65 expr: allocator .

    $default  reduce using rule 65 (expr)


State 43

   66 expr: call .

    $default  reduce using rule 66 (expr)


State 44

   75 call: callexpr . ')'
   78 callexpr: callexpr . ',' expr

    ')'  shift, and go to state 88
    ','  shift, and go to state 89


State 45

   70 expr: variable .

    $default  reduce using rule 70 (expr)


State 46

   71 expr: constant .

    $default  reduce using rule 71 (expr)


State 47

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 48

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 49

   44 ifelse: TOK_IF '(' . expr ')' statement
   45       | TOK_IF '(' . expr ')' statement dangling

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 90
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 50

   43 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 91
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 51

   48 return: TOK_RETURN ';' .

    $default  reduce using rule 48 (return)


State 52

   49 return: TOK_RETURN expr . ';'
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ';'        shift, and go to state 92
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 53

    8 structdef: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 93


State 54

   12 type: TOK_ARRAY TOK_LT . plaintype TOK_GT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_PTR     shift, and go to state 18

    plaintype  go to state 94


State 55

   72 allocator: TOK_ALLOC TOK_LT . TOK_STRING TOK_GT '(' expr ')'
   73          | TOK_ALLOC TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT '(' ')'
   74          | TOK_ALLOC TOK_LT . TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_STRING  shift, and go to state 95
    TOK_STRUCT  shift, and go to state 96
    TOK_ARRAY   shift, and go to state 97


State 56

   19 plaintype: TOK_PTR TOK_LT . TOK_STRUCT TOK_IDENT TOK_GT
   20          | TOK_PTR TOK_LT . TOK_IDENT TOK_GT

    TOK_STRUCT  shift, and go to state 98
    TOK_IDENT   shift, and go to state 99


State 57

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   68     | TOK_NOT expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 68 (expr)]
    TOK_EQ     [reduce using rule 68 (expr)]
    TOK_NE     [reduce using rule 68 (expr)]
    TOK_LT     [reduce using rule 68 (expr)]
    TOK_LE     [reduce using rule 68 (expr)]
    TOK_GT     [reduce using rule 68 (expr)]
    TOK_GE     [reduce using rule 68 (expr)]
    '['        [reduce using rule 68 (expr)]
    '='        [reduce using rule 68 (expr)]
    '+'        [reduce using rule 68 (expr)]
    '-'        [reduce using rule 68 (expr)]
    '*'        [reduce using rule 68 (expr)]
    '/'        [reduce using rule 68 (expr)]
    '%'        [reduce using rule 68 (expr)]
    '^'        [reduce using rule 68 (expr)]
    $default   reduce using rule 68 (expr)


State 58

   76 call: TOK_IDENT '(' . ')'
   77 callexpr: TOK_IDENT '(' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    ')'            shift, and go to state 100
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 101
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 59

   69 expr: TOK_NEW type . '[' expr ']'

    '['  shift, and go to state 102


State 60

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   67     | '(' expr . ')'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    ')'        shift, and go to state 103
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 61

   29 block: '{' '}' .

    $default  reduce using rule 29 (block)


State 62

   39 vardecl: type . TOK_IDENT ';'
   40        | type . TOK_IDENT '[' expr ']' ';'
   41        | type . TOK_IDENT '=' expr ';'
   42        | type . '[' ']' TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 104
    '['        shift, and go to state 69


State 63

   32 optstmt: '{' statement .

    $default  reduce using rule 32 (optstmt)


State 64

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   63     | '+' expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79

    TOK_ARROW  [reduce using rule 63 (expr)]
    $default   reduce using rule 63 (expr)


State 65

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   64     | '-' expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79

    TOK_ARROW  [reduce using rule 64 (expr)]
    $default   reduce using rule 64 (expr)


State 66

   10 structdef: structdef '}' . ';'

    ';'  shift, and go to state 105


State 67

    9 structdef: structdef type . TOK_IDENT ';'

    TOK_IDENT  shift, and go to state 106


State 68

   21 function: type TOK_IDENT . '(' funcident ')' block
   39 vardecl: type TOK_IDENT . ';'
   40        | type TOK_IDENT . '[' expr ']' ';'
   41        | type TOK_IDENT . '=' expr ';'

    '('  shift, and go to state 107
    '['  shift, and go to state 108
    ';'  shift, and go to state 109
    '='  shift, and go to state 110


State 69

   42 vardecl: type '[' . ']' TOK_IDENT '=' expr ';'

    ']'  shift, and go to state 111


State 70

   27 block: optstmt '}' .
   28      | optstmt '}' . ';'

    ';'  shift, and go to state 112

    ';'       [reduce using rule 27 (block)]
    $default  reduce using rule 27 (block)


State 71

   31 optstmt: optstmt statement .

    $default  reduce using rule 31 (optstmt)


State 72

   81 variable: expr TOK_ARROW . TOK_IDENT

    TOK_IDENT  shift, and go to state 113


State 73

   61 expr: expr TOK_EQ . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 114
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 74

   62 expr: expr TOK_NE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 115
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 75

   59 expr: expr TOK_LT . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 116
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 76

   60 expr: expr TOK_LE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 117
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 77

   57 expr: expr TOK_GT . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 118
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 78

   58 expr: expr TOK_GE . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 119
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 79

   80 variable: expr '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 120
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 80

   38 statement: expr ';' .

    $default  reduce using rule 38 (statement)


State 81

   50 expr: expr '=' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 121
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 82

   51 expr: expr '+' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 122
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 83

   52 expr: expr '-' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 123
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 84

   53 expr: expr '*' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 124
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 85

   54 expr: expr '/' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 125
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 86

   56 expr: expr '%' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 126
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 87

   55 expr: expr '^' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 127
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 88

   75 call: callexpr ')' .

    $default  reduce using rule 75 (call)


State 89

   78 callexpr: callexpr ',' . expr

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 128
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 90

   44 ifelse: TOK_IF '(' expr . ')' statement
   45       | TOK_IF '(' expr . ')' statement dangling
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    ')'        shift, and go to state 129
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 91

   43 while: TOK_WHILE '(' expr . ')' statement
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    ')'        shift, and go to state 130
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 92

   49 return: TOK_RETURN expr ';' .

    $default  reduce using rule 49 (return)


State 93

    8 structdef: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 8 (structdef)


State 94

   12 type: TOK_ARRAY TOK_LT plaintype . TOK_GT

    TOK_GT  shift, and go to state 131


State 95

   72 allocator: TOK_ALLOC TOK_LT TOK_STRING . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 132


State 96

   73 allocator: TOK_ALLOC TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT '(' ')'

    TOK_IDENT  shift, and go to state 133


State 97

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY . TOK_LT plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_LT  shift, and go to state 134


State 98

   19 plaintype: TOK_PTR TOK_LT TOK_STRUCT . TOK_IDENT TOK_GT

    TOK_IDENT  shift, and go to state 135


State 99

   20 plaintype: TOK_PTR TOK_LT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 136


State 100

   76 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 76 (call)


State 101

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   77 callexpr: TOK_IDENT '(' expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87

    $default  reduce using rule 77 (callexpr)


State 102

   69 expr: TOK_NEW type '[' . expr ']'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 137
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 103

   67 expr: '(' expr ')' .

    $default  reduce using rule 67 (expr)


State 104

   39 vardecl: type TOK_IDENT . ';'
   40        | type TOK_IDENT . '[' expr ']' ';'
   41        | type TOK_IDENT . '=' expr ';'

    '['  shift, and go to state 108
    ';'  shift, and go to state 109
    '='  shift, and go to state 110


State 105

   10 structdef: structdef '}' ';' .

    $default  reduce using rule 10 (structdef)


State 106

    9 structdef: structdef type TOK_IDENT . ';'

    ';'  shift, and go to state 138


State 107

   21 function: type TOK_IDENT '(' . funcident ')' block

    $default  reduce using rule 22 (funcident)

    funcident  go to state 139


State 108

   40 vardecl: type TOK_IDENT '[' . expr ']' ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 140
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 109

   39 vardecl: type TOK_IDENT ';' .

    $default  reduce using rule 39 (vardecl)


State 110

   41 vardecl: type TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 141
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 111

   42 vardecl: type '[' ']' . TOK_IDENT '=' expr ';'

    TOK_IDENT  shift, and go to state 142


State 112

   28 block: optstmt '}' ';' .

    $default  reduce using rule 28 (block)


State 113

   81 variable: expr TOK_ARROW TOK_IDENT .

    $default  reduce using rule 81 (variable)


State 114

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   61     | expr TOK_EQ expr .
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 61 (expr)]
    $default   reduce using rule 61 (expr)


State 115

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   62     | expr TOK_NE expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 62 (expr)]
    $default   reduce using rule 62 (expr)


State 116

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   59     | expr TOK_LT expr .
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 59 (expr)]
    $default   reduce using rule 59 (expr)


State 117

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   60     | expr TOK_LE expr .
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 60 (expr)]
    $default   reduce using rule 60 (expr)


State 118

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   57     | expr TOK_GT expr .
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 57 (expr)]
    $default   reduce using rule 57 (expr)


State 119

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   58     | expr TOK_GE expr .
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 58 (expr)]
    $default   reduce using rule 58 (expr)


State 120

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   80         | expr '[' expr . ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ']'        shift, and go to state 143
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 121

   50 expr: expr . '=' expr
   50     | expr '=' expr .
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 50 (expr)]
    $default   reduce using rule 50 (expr)


State 122

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   51     | expr '+' expr .
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 51 (expr)]
    $default   reduce using rule 51 (expr)


State 123

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   52     | expr '-' expr .
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 52 (expr)]
    $default   reduce using rule 52 (expr)


State 124

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   53     | expr '*' expr .
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 53 (expr)]
    $default   reduce using rule 53 (expr)


State 125

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   54     | expr '/' expr .
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 54 (expr)]
    $default   reduce using rule 54 (expr)


State 126

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   56     | expr '%' expr .
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 56 (expr)]
    $default   reduce using rule 56 (expr)


State 127

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   55     | expr '^' expr .
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    '['        shift, and go to state 79
    '^'        shift, and go to state 87

    TOK_ARROW  [reduce using rule 55 (expr)]
    $default   reduce using rule 55 (expr)


State 128

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   78 callexpr: callexpr ',' expr .
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87

    $default  reduce using rule 78 (callexpr)


State 129

   44 ifelse: TOK_IF '(' expr ')' . statement
   45       | TOK_IF '(' expr ')' . statement dangling

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 144
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 130

   43 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 145
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 131

   12 type: TOK_ARRAY TOK_LT plaintype TOK_GT .

    $default  reduce using rule 12 (type)


State 132

   72 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT . '(' expr ')'

    '('  shift, and go to state 146


State 133

   73 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT '(' ')'

    TOK_GT  shift, and go to state 147


State 134

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT . plaintype TOK_GT TOK_GT '(' expr ')'

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_PTR     shift, and go to state 18

    plaintype  go to state 148


State 135

   19 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT . TOK_GT

    TOK_GT  shift, and go to state 149


State 136

   20 plaintype: TOK_PTR TOK_LT TOK_IDENT TOK_GT .

    $default  reduce using rule 20 (plaintype)


State 137

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   69     | TOK_NEW type '[' expr . ']'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ']'        shift, and go to state 150
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 138

    9 structdef: structdef type TOK_IDENT ';' .

    $default  reduce using rule 9 (structdef)


State 139

   21 function: type TOK_IDENT '(' funcident . ')' block
   23 funcident: funcident . type TOK_IDENT
   24          | funcident . type '[' ']' TOK_IDENT
   25          | funcident . ',' type TOK_IDENT
   26          | funcident . ',' type '[' ']' TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18
    ')'         shift, and go to state 151
    ','         shift, and go to state 152

    type       go to state 153
    plaintype  go to state 32


State 140

   40 vardecl: type TOK_IDENT '[' expr . ']' ';'
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ']'        shift, and go to state 154
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 141

   41 vardecl: type TOK_IDENT '=' expr . ';'
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ';'        shift, and go to state 155
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 142

   42 vardecl: type '[' ']' TOK_IDENT . '=' expr ';'

    '='  shift, and go to state 156


State 143

   80 variable: expr '[' expr ']' .

    $default  reduce using rule 80 (variable)


State 144

   44 ifelse: TOK_IF '(' expr ')' statement .
   45       | TOK_IF '(' expr ')' statement . dangling

    TOK_ELSE  shift, and go to state 157

    $end           reduce using rule 44 (ifelse)
    $end           [reduce using rule 47 (dangling)]
    error          reduce using rule 44 (ifelse)
    error          [reduce using rule 47 (dangling)]
    TOK_VOID       reduce using rule 44 (ifelse)
    TOK_VOID       [reduce using rule 47 (dangling)]
    TOK_INT        reduce using rule 44 (ifelse)
    TOK_INT        [reduce using rule 47 (dangling)]
    TOK_STRING     reduce using rule 44 (ifelse)
    TOK_STRING     [reduce using rule 47 (dangling)]
    TOK_BOOL       reduce using rule 44 (ifelse)
    TOK_BOOL       [reduce using rule 47 (dangling)]
    TOK_REF        reduce using rule 44 (ifelse)
    TOK_REF        [reduce using rule 47 (dangling)]
    TOK_CHAR       reduce using rule 44 (ifelse)
    TOK_CHAR       [reduce using rule 47 (dangling)]
    TOK_IF         reduce using rule 44 (ifelse)
    TOK_IF         [reduce using rule 47 (dangling)]
    TOK_WHILE      reduce using rule 44 (ifelse)
    TOK_WHILE      [reduce using rule 47 (dangling)]
    TOK_RETURN     reduce using rule 44 (ifelse)
    TOK_RETURN     [reduce using rule 47 (dangling)]
    TOK_STRUCT     reduce using rule 44 (ifelse)
    TOK_STRUCT     [reduce using rule 47 (dangling)]
    TOK_NULLPTR    reduce using rule 44 (ifelse)
    TOK_NULLPTR    [reduce using rule 47 (dangling)]
    TOK_ARRAY      reduce using rule 44 (ifelse)
    TOK_ARRAY      [reduce using rule 47 (dangling)]
    TOK_ALLOC      reduce using rule 44 (ifelse)
    TOK_ALLOC      [reduce using rule 47 (dangling)]
    TOK_PTR        reduce using rule 44 (ifelse)
    TOK_PTR        [reduce using rule 47 (dangling)]
    TOK_NOT        reduce using rule 44 (ifelse)
    TOK_NOT        [reduce using rule 47 (dangling)]
    TOK_IDENT      reduce using rule 44 (ifelse)
    TOK_IDENT      [reduce using rule 47 (dangling)]
    TOK_INTCON     reduce using rule 44 (ifelse)
    TOK_INTCON     [reduce using rule 47 (dangling)]
    TOK_CHARCON    reduce using rule 44 (ifelse)
    TOK_CHARCON    [reduce using rule 47 (dangling)]
    TOK_STRINGCON  reduce using rule 44 (ifelse)
    TOK_STRINGCON  [reduce using rule 47 (dangling)]
    TOK_NEW        reduce using rule 44 (ifelse)
    TOK_NEW        [reduce using rule 47 (dangling)]
    '('            reduce using rule 44 (ifelse)
    '('            [reduce using rule 47 (dangling)]
    '{'            reduce using rule 44 (ifelse)
    '{'            [reduce using rule 47 (dangling)]
    '}'            reduce using rule 44 (ifelse)
    '}'            [reduce using rule 47 (dangling)]
    ';'            reduce using rule 44 (ifelse)
    ';'            [reduce using rule 47 (dangling)]
    '+'            reduce using rule 44 (ifelse)
    '+'            [reduce using rule 47 (dangling)]
    '-'            reduce using rule 44 (ifelse)
    '-'            [reduce using rule 47 (dangling)]
    $default       reduce using rule 44 (ifelse)

    dangling  go to state 158


State 145

   43 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 43 (while)


State 146

   72 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 159
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 147

   73 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT . '(' ')'

    '('  shift, and go to state 160


State 148

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype . TOK_GT TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 161


State 149

   19 plaintype: TOK_PTR TOK_LT TOK_STRUCT TOK_IDENT TOK_GT .

    $default  reduce using rule 19 (plaintype)


State 150

   69 expr: TOK_NEW type '[' expr ']' .

    $default  reduce using rule 69 (expr)


State 151

   21 function: type TOK_IDENT '(' funcident ')' . block

    '{'  shift, and go to state 26
    ';'  shift, and go to state 27

    block    go to state 162
    optstmt  go to state 35


State 152

   25 funcident: funcident ',' . type TOK_IDENT
   26          | funcident ',' . type '[' ']' TOK_IDENT

    TOK_VOID    shift, and go to state 5
    TOK_INT     shift, and go to state 6
    TOK_STRING  shift, and go to state 7
    TOK_BOOL    shift, and go to state 8
    TOK_REF     shift, and go to state 9
    TOK_CHAR    shift, and go to state 10
    TOK_ARRAY   shift, and go to state 16
    TOK_PTR     shift, and go to state 18

    type       go to state 163
    plaintype  go to state 32


State 153

   23 funcident: funcident type . TOK_IDENT
   24          | funcident type . '[' ']' TOK_IDENT

    TOK_IDENT  shift, and go to state 164
    '['        shift, and go to state 165


State 154

   40 vardecl: type TOK_IDENT '[' expr ']' . ';'

    ';'  shift, and go to state 166


State 155

   41 vardecl: type TOK_IDENT '=' expr ';' .

    $default  reduce using rule 41 (vardecl)


State 156

   42 vardecl: type '[' ']' TOK_IDENT '=' . expr ';'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 167
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 157

   46 dangling: TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_INT        shift, and go to state 6
    TOK_STRING     shift, and go to state 7
    TOK_BOOL       shift, and go to state 8
    TOK_REF        shift, and go to state 9
    TOK_CHAR       shift, and go to state 10
    TOK_IF         shift, and go to state 11
    TOK_WHILE      shift, and go to state 12
    TOK_RETURN     shift, and go to state 13
    TOK_NULLPTR    shift, and go to state 15
    TOK_ARRAY      shift, and go to state 16
    TOK_ALLOC      shift, and go to state 17
    TOK_PTR        shift, and go to state 18
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '{'            shift, and go to state 26
    ';'            shift, and go to state 27
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    type       go to state 62
    plaintype  go to state 32
    block      go to state 34
    optstmt    go to state 35
    statement  go to state 168
    vardecl    go to state 37
    while      go to state 38
    ifelse     go to state 39
    return     go to state 40
    expr       go to state 41
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 158

   45 ifelse: TOK_IF '(' expr ')' statement dangling .

    $default  reduce using rule 45 (ifelse)


State 159

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   72 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr . ')'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    ')'        shift, and go to state 169
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 160

   73 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' . ')'

    ')'  shift, and go to state 170


State 161

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT . TOK_GT '(' expr ')'

    TOK_GT  shift, and go to state 171


State 162

   21 function: type TOK_IDENT '(' funcident ')' block .

    $default  reduce using rule 21 (function)


State 163

   25 funcident: funcident ',' type . TOK_IDENT
   26          | funcident ',' type . '[' ']' TOK_IDENT

    TOK_IDENT  shift, and go to state 172
    '['        shift, and go to state 173


State 164

   23 funcident: funcident type TOK_IDENT .

    $default  reduce using rule 23 (funcident)


State 165

   24 funcident: funcident type '[' . ']' TOK_IDENT

    ']'  shift, and go to state 174


State 166

   40 vardecl: type TOK_IDENT '[' expr ']' ';' .

    $default  reduce using rule 40 (vardecl)


State 167

   42 vardecl: type '[' ']' TOK_IDENT '=' expr . ';'
   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    '['        shift, and go to state 79
    ';'        shift, and go to state 175
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 168

   46 dangling: TOK_ELSE statement .

    $default  reduce using rule 46 (dangling)


State 169

   72 allocator: TOK_ALLOC TOK_LT TOK_STRING TOK_GT '(' expr ')' .

    $default  reduce using rule 72 (allocator)


State 170

   73 allocator: TOK_ALLOC TOK_LT TOK_STRUCT TOK_IDENT TOK_GT '(' ')' .

    $default  reduce using rule 73 (allocator)


State 171

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT . '(' expr ')'

    '('  shift, and go to state 176


State 172

   25 funcident: funcident ',' type TOK_IDENT .

    $default  reduce using rule 25 (funcident)


State 173

   26 funcident: funcident ',' type '[' . ']' TOK_IDENT

    ']'  shift, and go to state 177


State 174

   24 funcident: funcident type '[' ']' . TOK_IDENT

    TOK_IDENT  shift, and go to state 178


State 175

   42 vardecl: type '[' ']' TOK_IDENT '=' expr ';' .

    $default  reduce using rule 42 (vardecl)


State 176

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' . expr ')'

    TOK_NULLPTR    shift, and go to state 15
    TOK_ALLOC      shift, and go to state 17
    TOK_NOT        shift, and go to state 19
    TOK_IDENT      shift, and go to state 20
    TOK_INTCON     shift, and go to state 21
    TOK_CHARCON    shift, and go to state 22
    TOK_STRINGCON  shift, and go to state 23
    TOK_NEW        shift, and go to state 24
    '('            shift, and go to state 25
    '+'            shift, and go to state 28
    '-'            shift, and go to state 29

    expr       go to state 179
    allocator  go to state 42
    call       go to state 43
    callexpr   go to state 44
    variable   go to state 45
    constant   go to state 46


State 177

   26 funcident: funcident ',' type '[' ']' . TOK_IDENT

    TOK_IDENT  shift, and go to state 180


State 178

   24 funcident: funcident type '[' ']' TOK_IDENT .

    $default  reduce using rule 24 (funcident)


State 179

   50 expr: expr . '=' expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '^' expr
   56     | expr . '%' expr
   57     | expr . TOK_GT expr
   58     | expr . TOK_GE expr
   59     | expr . TOK_LT expr
   60     | expr . TOK_LE expr
   61     | expr . TOK_EQ expr
   62     | expr . TOK_NE expr
   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr . ')'
   80 variable: expr . '[' expr ']'
   81         | expr . TOK_ARROW TOK_IDENT

    TOK_ARROW  shift, and go to state 72
    TOK_EQ     shift, and go to state 73
    TOK_NE     shift, and go to state 74
    TOK_LT     shift, and go to state 75
    TOK_LE     shift, and go to state 76
    TOK_GT     shift, and go to state 77
    TOK_GE     shift, and go to state 78
    ')'        shift, and go to state 181
    '['        shift, and go to state 79
    '='        shift, and go to state 81
    '+'        shift, and go to state 82
    '-'        shift, and go to state 83
    '*'        shift, and go to state 84
    '/'        shift, and go to state 85
    '%'        shift, and go to state 86
    '^'        shift, and go to state 87


State 180

   26 funcident: funcident ',' type '[' ']' TOK_IDENT .

    $default  reduce using rule 26 (funcident)


State 181

   74 allocator: TOK_ALLOC TOK_LT TOK_ARRAY TOK_LT plaintype TOK_GT TOK_GT '(' expr ')' .

    $default  reduce using rule 74 (allocator)
